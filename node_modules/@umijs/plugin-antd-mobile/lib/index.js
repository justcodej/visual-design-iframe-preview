"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _umi() {
  const data = require("umi");

  _umi = function _umi() {
    return data;
  };

  return data;
}

function _semver() {
  const data = _interopRequireDefault(require("semver"));

  _semver = function _semver() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const winPath = _umi().utils.winPath,
      resolve = _umi().utils.resolve;

const checkAntdMobile = api => {
  if ( // @ts-ignore
  api.pkg.dependencies && api.pkg.dependencies['antd-mobile'] || api.pkg.devDependencies && api.pkg.devDependencies['antd-mobile'] || api.pkg.clientDependencies && api.pkg.clientDependencies['antd-mobile']) {
    let version = '5.0.0-rc.2';

    try {
      version = require(`${api.paths.absNodeModulesPath}/antd-mobile/package.json`).version;
    } catch (error) {}

    return [_semver().default.lt('5.0.0-alpha.0', version), true];
  } // 用户没有安装


  return [true, false];
};
/**
 * https://github.com/umijs/plugins/issues/757
 * 补充需求：
 * plugin-antd-mobile 中增加 antd-mobile-v2 的依赖，并且为 antd-mobile-v2 增加 babel-plugin-import 配置
 * plugin-antd-mobile 中增加用户项目中自己安装的 antd-mobile 版本号判断，如果是 v2 的，那么为用户配置 babel-plugin-import
 * (为了满足 antd-mobile 2 到 5 的过渡，更改此插件之前请先仔细阅读上述需求)
 */


var _default = api => {
  const _checkAntdMobile = checkAntdMobile(api),
        _checkAntdMobile2 = _slicedToArray(_checkAntdMobile, 2),
        isAntdMobile5 = _checkAntdMobile2[0],
        hasDeps = _checkAntdMobile2[1];

  api.describe({
    key: 'antdMobile',
    config: {
      schema(Joi) {
        return Joi.object({
          hd: Joi.boolean()
        });
      }

    }
  });
  api.modifyBabelPresetOpts(opts => {
    const imps = [{
      libraryName: 'antd-mobile-v2',
      libraryDirectory: 'es',
      style: true
    }]; // 如果用户显示安装了antd-mobile@2 则为用户添加 babel-plugin-import

    if (hasDeps && !isAntdMobile5) {
      imps.push({
        libraryName: 'antd-mobile',
        libraryDirectory: 'es',
        style: true
      });
    }

    return _objectSpread(_objectSpread({}, opts), {}, {
      import: (opts.import || []).concat(imps)
    });
  });
  api.addProjectFirstLibraries(() => {
    // 用户也可以通过显示安装 antd-mobile-v2，升级版本
    return [{
      name: 'antd-mobile-v2',
      path: (0, _path().dirname)(require.resolve('antd-mobile-v2/package.json'))
    }];
  });
  api.chainWebpack(memo => {
    var _api$config, _api$config$antdMobil;

    //如果项目中安装的是 antd-mobile@5 优先使用用户项目中安装的 antd-mobile，否则忽略用户安装，强制指定 mobile@5 版本
    memo.resolve.alias.set('antd-mobile', winPath((0, _path().join)( // 通过 resolve 往上找，可支持 lerna 仓库
    // lerna 仓库如果用 yarn workspace 的依赖不一定在 node_modules，可能被提到根目录，并且没有 link
    (0, _path().dirname)(hasDeps ? resolve.sync(`antd-mobile/package.json`, {
      basedir: api.paths.cwd
    }) : require.resolve('antd-mobile/package.json')), isAntdMobile5 && ((_api$config = api.config) === null || _api$config === void 0 ? void 0 : (_api$config$antdMobil = _api$config.antdMobile) === null || _api$config$antdMobil === void 0 ? void 0 : _api$config$antdMobil.hd) ? '2x' : '')));
    return memo;
  });
};

exports.default = _default;