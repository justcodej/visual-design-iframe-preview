"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getShop = exports.getMenpiaoThemes = exports.getMenpiaoList = exports.getListData = exports.getAllCategory = exports.filterCurrentCity = exports.areaData = exports._initListData = void 0;
var _commonLib = require("@boluome/common-lib");
var _fun = require("../../utils/fun");
var _const = require("../../utils/const");
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var getListData = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {
    var params, url, type, totalName, appCode, page;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            params = options.params, url = options.url, type = options.type, totalName = options.totalName, appCode = options.appCode;
            page = params.page || params.currentPage;
            return _context.abrupt("return", new Promise(function (resolve, reject) {
              return (0, _fun.send)({
                appCode: appCode,
                url: url,
                data: params
              }).then(function (res) {
                if (res.code !== 0) return reject(false);
                var data = res.data;
                var backData = {
                  init: false,
                  dataSource: [],
                  total: 0,
                  pageNum: page
                };
                if (data[type]) {
                  if (page === 1) {
                    backData.init = true;
                  }
                  backData.dataSource = data[type];
                  backData.total = data[totalName];
                }
                return resolve(backData);
              })["catch"](function () {
                return reject(false);
              });
            }));
          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function getListData(_x) {
    return _ref.apply(this, arguments);
  };
}();
exports.getListData = getListData;
var _initListData = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {
    var code, type, appCode, pageNum, locationInfo, _ref2$sort, sort, data, TYPEAREA, options, sortConfig;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            code = _ref2.code, type = _ref2.type, appCode = _ref2.appCode, pageNum = _ref2.pageNum, locationInfo = _ref2.locationInfo, _ref2$sort = _ref2.sort, sort = _ref2$sort === void 0 ? 1 : _ref2$sort;
            data = {
              pageNum: pageNum || 0
            };
            data.pageNum += 1;
            if (!(type === 6)) {
              _context2.next = 5;
              break;
            }
            return _context2.abrupt("return", getMenpiaoList({
              pageNum: data.pageNum,
              locationInfo: locationInfo,
              appCode: appCode
            }));
          case 5:
            if (!(type === 7)) {
              _context2.next = 7;
              break;
            }
            return _context2.abrupt("return", getShop({
              pageNum: data.pageNum,
              appCode: appCode,
              locationInfo: locationInfo
            }));
          case 7:
            TYPEAREA = {
              4: {
                url: '/api/pindao/channel/channelSelected',
                dataName: 'commodityList',
                total: 'commodityTotal' // 后端返回的总条数字段名称
              },

              5: {
                url: '/api/pindao/channel/cardRecommend',
                dataName: 'list',
                total: 'totalCount'
              }
            };
            options = {
              appCode: appCode,
              params: {
                appCode: appCode,
                page: data.pageNum,
                pageSize: 10,
                recommendCode: code
              },
              url: TYPEAREA[type].url,
              type: TYPEAREA[type].dataName,
              totalName: TYPEAREA[type].total
            };
            sortConfig = {
              1: {
                sort: 1,
                sortDesc: 'online_time',
                type: null
              },
              2: {
                sort: 1,
                sortDesc: 'commoditySaleNum',
                type: null
              },
              3: {
                sort: 0,
                sortDesc: 'commoditySaleNum',
                type: null
              },
              4: {
                sort: 1,
                sortDesc: null,
                type: null
              },
              5: {
                sort: 0,
                sortDesc: null,
                type: null
              },
              6: {
                sort: 0,
                sortDesc: null,
                type: 1
              }
            };
            if (type === 4) {
              options.params.sort = sortConfig[sort].sort;
              options.params.sortDesc = sortConfig[sort].sortDesc;
              options.params.type = sortConfig[sort].type;
            }
            _context2.next = 13;
            return getListData(options);
          case 13:
            return _context2.abrupt("return", _context2.sent);
          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return function _initListData(_x2) {
    return _ref3.apply(this, arguments);
  };
}();
exports._initListData = _initListData;
var getCityNameAbbr = function getCityNameAbbr(suffixArr, cityName) {
  if (cityName === void 0) {
    cityName = _const.defaultCity;
  }
  var currentSuffix = suffixArr.find(function (v) {
    var index = cityName.indexOf(v);
    return index >= 0;
  });
  var abbr = cityName.replace(currentSuffix, '');
  return abbr;
};
// 景点门票列表
var getMenpiaoList = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref4) {
    var _ref4$pageNum, pageNum, locationInfo, _ref4$jingdianSelecte, jingdianSelected, appCode, _ref6, _ref6$location, location, _ref6$addressComponen, addressComponent, cityNameAbbr, geopoint, theme, sort, level, options;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _ref4$pageNum = _ref4.pageNum, pageNum = _ref4$pageNum === void 0 ? 1 : _ref4$pageNum, locationInfo = _ref4.locationInfo, _ref4$jingdianSelecte = _ref4.jingdianSelected, jingdianSelected = _ref4$jingdianSelecte === void 0 ? {} : _ref4$jingdianSelecte, appCode = _ref4.appCode;
            _ref6 = locationInfo || {}, _ref6$location = _ref6.location, location = _ref6$location === void 0 ? {} : _ref6$location, _ref6$addressComponen = _ref6.addressComponent, addressComponent = _ref6$addressComponen === void 0 ? {} : _ref6$addressComponen;
            cityNameAbbr = getCityNameAbbr(_const.SUFFIX, addressComponent.city);
            geopoint = (0, _commonLib.getStore)('geopoint', 'session') || {};
            theme = jingdianSelected['0'] || {};
            sort = jingdianSelected['1'] || {};
            level = jingdianSelected['2'] || {};
            options = {
              appCode: appCode,
              params: {
                channel: 'lvmama',
                city: cityNameAbbr,
                currentPage: pageNum,
                lat: geopoint.latitude || location.lat,
                lng: geopoint.longitude || location.lng,
                mapType: 'gaode',
                pageSize: 10,
                level: level.value || '',
                sort: sort.value || '',
                theme: theme.value || ''
              },
              url: '/api/pindao/attractions/scenic',
              type: 'scenicList',
              totalName: 'count'
            };
            _context3.next = 10;
            return getListData(options);
          case 10:
            return _context3.abrupt("return", _context3.sent);
          case 11:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return function getMenpiaoList(_x3) {
    return _ref5.apply(this, arguments);
  };
}();
exports.getMenpiaoList = getMenpiaoList;
var getShop = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref7) {
    var _ref7$pageNum, pageNum, appCode, locationInfo, _ref7$filterShopSelec, filterShopSelected, _ref9, _ref9$location, location, _ref9$addressComponen, addressComponent, geopoint, area, areaId, businessId, sortObj, sort, category, categoryNameC1, categoryNameC2, options;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _ref7$pageNum = _ref7.pageNum, pageNum = _ref7$pageNum === void 0 ? 1 : _ref7$pageNum, appCode = _ref7.appCode, locationInfo = _ref7.locationInfo, _ref7$filterShopSelec = _ref7.filterShopSelected, filterShopSelected = _ref7$filterShopSelec === void 0 ? {} : _ref7$filterShopSelec;
            _ref9 = locationInfo || {}, _ref9$location = _ref9.location, location = _ref9$location === void 0 ? {} : _ref9$location, _ref9$addressComponen = _ref9.addressComponent, addressComponent = _ref9$addressComponen === void 0 ? {} : _ref9$addressComponen;
            geopoint = (0, _commonLib.getStore)('geopoint', 'session') || {};
            area = filterShopSelected[0] || {};
            areaId = area.parentId || '';
            businessId = (area.value || '') !== areaId ? area.value : '';
            sortObj = filterShopSelected[1] || {};
            sort = sortObj.value || 3;
            category = filterShopSelected[2] || {};
            categoryNameC1 = category.value !== 0 ? category.parentName : '';
            categoryNameC2 = category.value !== 0 ? category.name : '';
            options = {
              appCode: appCode,
              params: {
                areaId: areaId,
                businessId: businessId,
                categoryNameC1: categoryNameC1,
                categoryNameC2: categoryNameC2,
                centerId: '',
                cityName: addressComponent.city,
                sort: sort,
                distance: 999999999,
                lat: geopoint.latitude || location.lat,
                lon: geopoint.longitude || location.lng,
                page: pageNum,
                pageSize: 10,
                appCode: appCode
              },
              url: '/api/pindao/es/queryShop',
              type: 'list',
              totalName: 'total',
              pageNum: pageNum
            };
            _context4.next = 14;
            return getListData(options);
          case 14:
            return _context4.abrupt("return", _context4.sent);
          case 15:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return function getShop(_x4) {
    return _ref8.apply(this, arguments);
  };
}();
exports.getShop = getShop;
var getMenpiaoThemes = function getMenpiaoThemes(city, appCode) {
  var cityNameAbbr = getCityNameAbbr(_const.SUFFIX, city);
  return new Promise(function (resolve, reject) {
    var sendData = {
      channel: 'lvmama',
      city: cityNameAbbr
    };
    var themeUrl = '/api/pindao/attractions/themes';
    (0, _fun.send)({
      appCode: appCode,
      url: themeUrl,
      data: sendData
    }).then(function (reply) {
      var code = reply.code,
        data = reply.data,
        message = reply.message;
      if (code === 0) {
        var themeData = data.map(function (name) {
          return {
            name: name,
            value: name
          };
        });
        return resolve([{
          name: '全部景点',
          value: 0
        }].concat(themeData));
      }
      console.log('/api/pindao/attractions/themes,数据请求失败', message);
      return reject([]);
    })["catch"](function () {
      reject([]);
    });
  });
};
exports.getMenpiaoThemes = getMenpiaoThemes;
var mapCategory = function mapCategory(items) {
  return items.map(function (item) {
    var list = item.list || [];
    list = list.map(function (v) {
      return {
        value: v.id,
        name: v.name,
        parentId: v.parentId,
        parentName: item.name
      };
    });
    return {
      value: item.id,
      name: item.name,
      parentId: 0,
      children: list
    };
  });
};
var getAllCategory = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(appCode) {
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", new Promise(function (resolve, reject) {
              (0, _fun.send)({
                appCode: appCode,
                url: '/api/pindao/es/getAllCategory',
                data: {
                  appCode: appCode
                }
              }).then(function (reply) {
                var code = reply.code,
                  data = reply.data,
                  message = reply.message;
                if (code === 0) {
                  var allCategory = [];
                  var allCategoryObj = {
                    value: 0,
                    children: allCategory,
                    name: '全部',
                    parentId: 0
                  };
                  var list = mapCategory(data);
                  list.forEach(function (item) {
                    allCategory.push.apply(allCategory, item.children);
                  });
                  list = [allCategoryObj].concat(list);
                  return resolve(list);
                }
                console.log('/api/pindao/attractions/themes,数据请求失败', message);
                return reject([]);
              })["catch"](function () {
                return reject([]);
              });
            }));
          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return function getAllCategory(_x5) {
    return _ref10.apply(this, arguments);
  };
}();
exports.getAllCategory = getAllCategory;
var filterCurrentCity = function filterCurrentCity(_ref11) {
  var _ref11$cityArr = _ref11.cityArr,
    cityArr = _ref11$cityArr === void 0 ? [] : _ref11$cityArr,
    locationInfo = _ref11.locationInfo;
  var _ref12 = locationInfo || {},
    _ref12$addressCompone = _ref12.addressComponent,
    addressComponent = _ref12$addressCompone === void 0 ? {} : _ref12$addressCompone;
  var filter = [];
  cityArr.forEach(function (item) {
    if (item.label === addressComponent.city) {
      filter = [{
        label: '全城',
        value: 0
      }].concat(item.children);
      return;
    }
    if (item.children) filterCurrentCity({
      cityArr: item.children,
      locationInfo: locationInfo
    });
  });
  filter = filter.map(function (item) {
    return _extends({}, item, {
      name: item.label,
      children: [{
        name: '全部',
        value: 0
      }]
    });
  });
  return filter;
};
exports.filterCurrentCity = filterCurrentCity;
var getArea = /*#__PURE__*/function () {
  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(areaId, appCode) {
    var params, res, resData, data;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            params = {
              status: 1,
              appCode: appCode
            };
            if (areaId) {
              params.areaId = areaId;
            }
            _context6.next = 4;
            return (0, _fun.send)({
              appCode: appCode,
              url: '/api/pindao/es/getAllBusiness',
              data: params
            });
          case 4:
            res = _context6.sent;
            if (!(res.code === 0)) {
              _context6.next = 9;
              break;
            }
            resData = res.data || [];
            data = resData.map(function (item) {
              return {
                name: item.name,
                value: item.id,
                parentId: areaId || 0
              };
            });
            return _context6.abrupt("return", data);
          case 9:
            return _context6.abrupt("return", []);
          case 10:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return function getArea(_x6, _x7) {
    return _ref13.apply(this, arguments);
  };
}();
var areaData = /*#__PURE__*/function () {
  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(obj, appCode) {
    var data, defaultData;
    return _regeneratorRuntime().wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return getArea(obj.value, appCode);
          case 2:
            data = _context7.sent;
            defaultData = {
              name: '全部',
              label: obj.name,
              parentId: obj.value,
              value: obj.value
            };
            return _context7.abrupt("return", [defaultData].concat(data));
          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return function areaData(_x8, _x9) {
    return _ref14.apply(this, arguments);
  };
}();
exports.areaData = areaData;