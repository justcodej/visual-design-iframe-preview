import { Component } from 'react';
import './index.less';
interface Props {
    onChange: (selected: SelectedProps) => void;
    onClickPanel?: (v?: FilterDataProps, index?: number) => void;
    filterData: Array<FilterDataProps>;
    filterSelected: SelectedProps;
    tabsEl: any;
    navBarHeight: number;
    masonryWrap: any;
}
interface SelectedProps {
    [key: string | number]: SelectedItemProps;
}
interface SelectedItemProps {
    name: string;
    parentId?: number;
    value: number;
}
interface FilterDataProps {
    name: string;
    options: Array<ItemOption>;
    value?: number;
    type?: number;
    callBack?: (o: any) => Promise<Array<ItemOption>>;
}
interface ItemOption {
    name: string;
    value: string | number;
    parentId?: string | number;
    parenName?: string;
    children?: Array<ItemOption>;
}
interface StateProps {
    openIndex: number;
    modalVisible: boolean;
    selectedFilters: SelectedProps;
    tabsBarHeight: number;
    cascadeChildren: Array<ItemOption>;
    cascadeActive: number;
    currentMultiSelected?: Array<ItemOption>;
}
declare class Filter extends Component<Props, StateProps> {
    state: StateProps;
    static defaultProps: {
        navBarHeight: number;
    };
    componentDidMount(): void;
    initCascadeData(index: any): Promise<void>;
    handClickPanel(item: FilterDataProps, index: any): void;
    setVisible: (visible?: boolean) => void;
    handSelected(item: any): void;
    cascadeClick(item: any, call: any): Promise<void>;
    cascadeSelected(item: any): void;
    multiSelect(item: ItemOption): void;
    submitMultiSelect(): void;
    resetMultiSelect(): void;
    render(): JSX.Element;
}
export default Filter;
