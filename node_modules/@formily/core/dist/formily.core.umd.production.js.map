{"version":3,"file":"formily.core.umd.production.js","sources":["../src/models/LifeCycle.ts","../src/types.ts","../src/models/Heart.ts","../src/shared/checkers.ts","../src/models/Graph.ts","../src/shared/constants.ts","../src/shared/internals.ts","../src/models/Query.ts","../src/models/BaseField.ts","../src/models/Field.ts","../src/shared/effective.ts","../src/models/ArrayField.ts","../src/models/ObjectField.ts","../src/models/VoidField.ts","../src/models/Form.ts","../src/effects/onFormEffects.ts","../src/effects/onFieldEffects.ts","../src/shared/externals.ts"],"sourcesContent":["import { isFn, isStr, each } from '@formily/shared'\nimport { LifeCycleHandler, LifeCyclePayload } from '../types'\n\ntype LifeCycleParams<Payload> = Array<\n  | string\n  | LifeCycleHandler<Payload>\n  | { [key: string]: LifeCycleHandler<Payload> }\n>\nexport class LifeCycle<Payload = any> {\n  private listener: LifeCyclePayload<Payload>\n\n  constructor(...params: LifeCycleParams<Payload>) {\n    this.listener = this.buildListener(params)\n  }\n  buildListener = (params: any[]) => {\n    return function (payload: { type: string; payload: Payload }, ctx: any) {\n      for (let index = 0; index < params.length; index++) {\n        let item = params[index]\n        if (isFn(item)) {\n          item.call(this, payload, ctx)\n        } else if (isStr(item) && isFn(params[index + 1])) {\n          if (item === payload.type) {\n            params[index + 1].call(this, payload.payload, ctx)\n          }\n          index++\n        } else {\n          each<any, any>(item, (handler, type) => {\n            if (isFn(handler) && isStr(type)) {\n              if (type === payload.type) {\n                handler.call(this, payload.payload, ctx)\n                return false\n              }\n            }\n          })\n        }\n      }\n    }\n  }\n\n  notify = <Payload>(type: any, payload?: Payload, ctx?: any) => {\n    if (isStr(type)) {\n      this.listener.call(ctx, { type, payload }, ctx)\n    }\n  }\n}\n","import {\n  IValidatorRules,\n  Validator,\n  ValidatorTriggerType,\n} from '@formily/validator'\nimport { FormPath } from '@formily/shared'\nimport {\n  Form,\n  Field,\n  LifeCycle,\n  ArrayField,\n  VoidField,\n  ObjectField,\n  Query,\n} from './models'\n\nexport type NonFunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends (...args: any) => any ? never : K\n}[keyof T]\n\nexport type NonFunctionProperties<T> = Pick<T, NonFunctionPropertyNames<T>>\n\nexport type AnyFunction = (...args: any[]) => any\n\nexport type JSXComponent = any\n\nexport type LifeCycleHandler<T> = (payload: T, context: any) => void\n\nexport type LifeCyclePayload<T> = (\n  params: {\n    type: string\n    payload: T\n  },\n  context: any\n) => void\n\nexport enum LifeCycleTypes {\n  /**\n   * Form LifeCycle\n   **/\n\n  ON_FORM_INIT = 'onFormInit',\n  ON_FORM_MOUNT = 'onFormMount',\n  ON_FORM_UNMOUNT = 'onFormUnmount',\n\n  ON_FORM_INPUT_CHANGE = 'onFormInputChange',\n  ON_FORM_VALUES_CHANGE = 'onFormValuesChange',\n  ON_FORM_INITIAL_VALUES_CHANGE = 'onFormInitialValuesChange',\n\n  ON_FORM_SUBMIT = 'onFormSubmit',\n  ON_FORM_RESET = 'onFormReset',\n  ON_FORM_SUBMIT_START = 'onFormSubmitStart',\n  ON_FORM_SUBMITTING = 'onFormSubmitting',\n  ON_FORM_SUBMIT_END = 'onFormSubmitEnd',\n  ON_FORM_SUBMIT_VALIDATE_START = 'onFormSubmitValidateStart',\n  ON_FORM_SUBMIT_VALIDATE_SUCCESS = 'onFormSubmitValidateSuccess',\n  ON_FORM_SUBMIT_VALIDATE_FAILED = 'onFormSubmitValidateFailed',\n  ON_FORM_SUBMIT_VALIDATE_END = 'onFormSubmitValidateEnd',\n  ON_FORM_SUBMIT_SUCCESS = 'onFormSubmitSuccess',\n  ON_FORM_SUBMIT_FAILED = 'onFormSubmitFailed',\n  ON_FORM_VALIDATE_START = 'onFormValidateStart',\n  ON_FORM_VALIDATING = 'onFormValidating',\n  ON_FORM_VALIDATE_SUCCESS = 'onFormValidateSuccess',\n  ON_FORM_VALIDATE_FAILED = 'onFormValidateFailed',\n  ON_FORM_VALIDATE_END = 'onFormValidateEnd',\n\n  ON_FORM_GRAPH_CHANGE = 'onFormGraphChange',\n  ON_FORM_LOADING = 'onFormLoading',\n\n  /**\n   * Field LifeCycle\n   **/\n\n  ON_FIELD_INIT = 'onFieldInit',\n  ON_FIELD_INPUT_VALUE_CHANGE = 'onFieldInputValueChange',\n  ON_FIELD_VALUE_CHANGE = 'onFieldValueChange',\n  ON_FIELD_INITIAL_VALUE_CHANGE = 'onFieldInitialValueChange',\n\n  ON_FIELD_SUBMIT = 'onFieldSubmit',\n  ON_FIELD_SUBMIT_START = 'onFieldSubmitStart',\n  ON_FIELD_SUBMITTING = 'onFieldSubmitting',\n  ON_FIELD_SUBMIT_END = 'onFieldSubmitEnd',\n  ON_FIELD_SUBMIT_VALIDATE_START = 'onFieldSubmitValidateStart',\n  ON_FIELD_SUBMIT_VALIDATE_SUCCESS = 'onFieldSubmitValidateSuccess',\n  ON_FIELD_SUBMIT_VALIDATE_FAILED = 'onFieldSubmitValidateFailed',\n  ON_FIELD_SUBMIT_VALIDATE_END = 'onFieldSubmitValidateEnd',\n  ON_FIELD_SUBMIT_SUCCESS = 'onFieldSubmitSuccess',\n  ON_FIELD_SUBMIT_FAILED = 'onFieldSubmitFailed',\n  ON_FIELD_VALIDATE_START = 'onFieldValidateStart',\n  ON_FIELD_VALIDATING = 'onFieldValidating',\n  ON_FIELD_VALIDATE_SUCCESS = 'onFieldValidateSuccess',\n  ON_FIELD_VALIDATE_FAILED = 'onFieldValidateFailed',\n  ON_FIELD_VALIDATE_END = 'onFieldValidateEnd',\n\n  ON_FIELD_LOADING = 'onFieldLoading',\n  ON_FIELD_RESET = 'onFieldReset',\n  ON_FIELD_MOUNT = 'onFieldMount',\n  ON_FIELD_UNMOUNT = 'onFieldUnmount',\n}\n\nexport type HeartSubscriber = ({\n  type,\n  payload,\n}: {\n  type: string\n  payload: any\n}) => void\n\nexport interface INodePatch<T> {\n  type: 'remove' | 'update'\n  address: string\n  oldAddress?: string\n  payload?: T\n}\n\nexport interface IHeartProps<Context> {\n  lifecycles?: LifeCycle[]\n  context?: Context\n}\n\nexport interface IFieldFeedback {\n  triggerType?: FieldFeedbackTriggerTypes\n  type?: FieldFeedbackTypes\n  code?: FieldFeedbackCodeTypes\n  messages?: FeedbackMessage\n}\n\nexport type IFormFeedback = IFieldFeedback & {\n  path?: string\n  address?: string\n}\n\nexport interface ISearchFeedback {\n  triggerType?: FieldFeedbackTriggerTypes\n  type?: FieldFeedbackTypes\n  code?: FieldFeedbackCodeTypes\n  address?: FormPathPattern\n  path?: FormPathPattern\n  messages?: FeedbackMessage\n}\n\nexport type FeedbackMessage = any[]\n\nexport type IFieldUpdate = {\n  pattern: FormPath\n  callbacks: ((...args: any[]) => any)[]\n}\n\nexport interface IFormRequests {\n  validate?: NodeJS.Timeout\n  submit?: NodeJS.Timeout\n  loading?: NodeJS.Timeout\n  updates?: IFieldUpdate[]\n  updateIndexes?: Record<string, number>\n}\n\nexport type IFormFields = Record<string, GeneralField>\n\nexport type FieldFeedbackTypes = 'error' | 'success' | 'warning'\n\nexport type FieldFeedbackTriggerTypes = ValidatorTriggerType\n\nexport type FieldFeedbackCodeTypes =\n  | 'ValidateError'\n  | 'ValidateSuccess'\n  | 'ValidateWarning'\n  | 'EffectError'\n  | 'EffectSuccess'\n  | 'EffectWarning'\n  | (string & {})\n\nexport type FormPatternTypes =\n  | 'editable'\n  | 'readOnly'\n  | 'disabled'\n  | 'readPretty'\n  | ({} & string)\nexport type FormDisplayTypes = 'none' | 'hidden' | 'visible' | ({} & string)\n\nexport type FormPathPattern =\n  | string\n  | number\n  | Array<string | number>\n  | FormPath\n  | RegExp\n  | (((address: Array<string | number>) => boolean) & {\n      path: FormPath\n    })\n\ntype OmitState<P> = Omit<\n  P,\n  | 'selfDisplay'\n  | 'selfPattern'\n  | 'originValues'\n  | 'originInitialValues'\n  | 'id'\n  | 'address'\n  | 'path'\n  | 'lifecycles'\n  | 'disposers'\n  | 'requests'\n  | 'fields'\n  | 'graph'\n  | 'heart'\n  | 'indexes'\n  | 'props'\n  | 'displayName'\n  | 'setState'\n  | 'getState'\n  | 'getFormGraph'\n  | 'setFormGraph'\n  | 'setFormState'\n  | 'getFormState'\n>\n\nexport type IFieldState = Partial<\n  Pick<\n    Field,\n    NonFunctionPropertyNames<OmitState<Field<any, any, string, string>>>\n  >\n>\n\nexport type IVoidFieldState = Partial<\n  Pick<\n    VoidField,\n    NonFunctionPropertyNames<OmitState<VoidField<any, any, string>>>\n  >\n>\n\nexport type IFormState<T extends Record<any, any> = any> = Pick<\n  Form<T>,\n  NonFunctionPropertyNames<OmitState<Form<{ [key: string]: any }>>>\n>\n\nexport type IFormGraph = Record<string, IGeneralFieldState | IFormState>\n\nexport interface IFormProps<T extends object = any> {\n  values?: Partial<T>\n  initialValues?: Partial<T>\n  pattern?: FormPatternTypes\n  display?: FormDisplayTypes\n  hidden?: boolean\n  visible?: boolean\n  editable?: boolean\n  disabled?: boolean\n  readOnly?: boolean\n  readPretty?: boolean\n  effects?: (form: Form<T>) => void\n  validateFirst?: boolean\n  designable?: boolean\n}\n\nexport type IFormMergeStrategy =\n  | 'overwrite'\n  | 'merge'\n  | 'deepMerge'\n  | 'shallowMerge'\n\nexport interface IFieldFactoryProps<\n  Decorator extends JSXComponent,\n  Component extends JSXComponent,\n  TextType = any,\n  ValueType = any\n> extends IFieldProps<Decorator, Component, TextType, ValueType> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n}\n\nexport interface IVoidFieldFactoryProps<\n  Decorator extends JSXComponent,\n  Component extends JSXComponent,\n  TextType = any\n> extends IVoidFieldProps<Decorator, Component, TextType> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n}\n\nexport interface IFieldRequests {\n  validate?: NodeJS.Timeout\n  submit?: NodeJS.Timeout\n  loading?: NodeJS.Timeout\n  batch?: () => void\n}\n\nexport interface IFieldCaches {\n  value?: any\n  initialValue?: any\n  inputting?: boolean\n}\n\nexport type FieldDisplayTypes = 'none' | 'hidden' | 'visible' | ({} & string)\n\nexport type FieldPatternTypes =\n  | 'editable'\n  | 'readOnly'\n  | 'disabled'\n  | 'readPretty'\n  | ({} & string)\n\nexport type FieldValidatorContext = IValidatorRules & {\n  field?: Field\n  form?: Form\n  value?: any\n}\n\nexport type FieldValidator = Validator<FieldValidatorContext>\n\nexport type FieldDataSource = {\n  label?: any\n  value?: any\n  title?: any\n  key?: any\n  text?: any\n  children?: FieldDataSource\n  [key: string]: any\n}[]\n\nexport type FieldComponent<\n  Component extends JSXComponent,\n  ComponentProps = any\n> = [Component] | [Component, ComponentProps] | boolean | any[]\n\nexport type FieldDecorator<\n  Decorator extends JSXComponent,\n  ComponentProps = any\n> = [Decorator] | [Decorator, ComponentProps] | boolean | any[]\n\nexport type FieldReaction = (field: Field) => void\nexport interface IFieldProps<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any,\n  TextType = any,\n  ValueType = any\n> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n  title?: TextType\n  description?: TextType\n  value?: ValueType\n  initialValue?: ValueType\n  required?: boolean\n  display?: FieldDisplayTypes\n  pattern?: FieldPatternTypes\n  hidden?: boolean\n  visible?: boolean\n  editable?: boolean\n  disabled?: boolean\n  readOnly?: boolean\n  readPretty?: boolean\n  dataSource?: FieldDataSource\n  validateFirst?: boolean\n  validator?: FieldValidator\n  decorator?: FieldDecorator<Decorator>\n  component?: FieldComponent<Component>\n  reactions?: FieldReaction[] | FieldReaction\n  content?: any\n  data?: any\n}\n\nexport interface IVoidFieldProps<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any,\n  TextType = any\n> {\n  name: FormPathPattern\n  basePath?: FormPathPattern\n  title?: TextType\n  description?: TextType\n  display?: FieldDisplayTypes\n  pattern?: FieldPatternTypes\n  hidden?: boolean\n  visible?: boolean\n  editable?: boolean\n  disabled?: boolean\n  readOnly?: boolean\n  readPretty?: boolean\n  decorator?: FieldDecorator<Decorator>\n  component?: FieldComponent<Component>\n  reactions?: FieldReaction[] | FieldReaction\n  content?: any\n  data?: any\n}\n\nexport interface IFieldResetOptions {\n  forceClear?: boolean\n  validate?: boolean\n}\n\nexport type IGeneralFieldState = IFieldState & IVoidFieldState\n\nexport type GeneralField = Field | VoidField | ArrayField | ObjectField\n\nexport type DataField = Field | ArrayField | ObjectField\nexport interface ISpliceArrayStateProps {\n  startIndex?: number\n  deleteCount?: number\n  insertCount?: number\n}\n\nexport interface IExchangeArrayStateProps {\n  fromIndex?: number\n  toIndex?: number\n}\n\nexport interface IQueryProps {\n  pattern: FormPathPattern\n  base: FormPathPattern\n  form: Form\n}\n\nexport interface IModelSetter<P = any> {\n  (setter: (state: P) => void): void\n  (setter: Partial<P>): void\n  (): void\n}\n\nexport interface IModelGetter<P = any> {\n  <Getter extends (state: P) => any>(getter: Getter): ReturnType<Getter>\n  (): P\n}\n\nexport type FieldMatchPattern = FormPathPattern | Query | GeneralField\n\nexport interface IFieldStateSetter {\n  (pattern: FieldMatchPattern, setter: (state: IFieldState) => void): void\n  (pattern: FieldMatchPattern, setter: Partial<IFieldState>): void\n}\n\nexport interface IFieldStateGetter {\n  <Getter extends (state: IGeneralFieldState) => any>(\n    pattern: FieldMatchPattern,\n    getter: Getter\n  ): ReturnType<Getter>\n  (pattern: FieldMatchPattern): IGeneralFieldState\n}\n","import { isStr, isArr, Subscribable } from '@formily/shared'\nimport { LifeCycle } from './LifeCycle'\nimport { IHeartProps } from '../types'\nexport class Heart<Payload = any, Context = any> extends Subscribable {\n  lifecycles: LifeCycle<Payload>[] = []\n\n  outerLifecycles: Map<any, LifeCycle<Payload>[]> = new Map()\n\n  context: Context\n\n  constructor({ lifecycles, context }: IHeartProps<Context> = {}) {\n    super()\n    this.lifecycles = this.buildLifeCycles(lifecycles || [])\n    this.context = context\n  }\n\n  buildLifeCycles = (lifecycles: LifeCycle[]) => {\n    return lifecycles.reduce((buf, item) => {\n      if (item instanceof LifeCycle) {\n        return buf.concat(item)\n      } else {\n        if (isArr(item)) {\n          return this.buildLifeCycles(item)\n        } else if (typeof item === 'object') {\n          this.context = item\n          return buf\n        }\n        return buf\n      }\n    }, [])\n  }\n\n  addLifeCycles = (id: any, lifecycles: LifeCycle[] = []) => {\n    const observers = this.buildLifeCycles(lifecycles)\n    if (observers.length) {\n      this.outerLifecycles.set(id, observers)\n    }\n  }\n\n  hasLifeCycles = (id: any) => {\n    return this.outerLifecycles.has(id)\n  }\n\n  removeLifeCycles = (id: any) => {\n    this.outerLifecycles.delete(id)\n  }\n\n  setLifeCycles = (lifecycles: LifeCycle[] = []) => {\n    this.lifecycles = this.buildLifeCycles(lifecycles)\n  }\n\n  publish = <P, C>(type: any, payload?: P, context?: C) => {\n    if (isStr(type)) {\n      this.lifecycles.forEach((lifecycle) => {\n        lifecycle.notify(type, payload, context || this.context)\n      })\n      this.outerLifecycles.forEach((lifecycles) => {\n        lifecycles.forEach((lifecycle) => {\n          lifecycle.notify(type, payload, context || this.context)\n        })\n      })\n      this.notify({\n        type,\n        payload,\n      })\n    }\n  }\n\n  clear = () => {\n    this.lifecycles = []\n    this.outerLifecycles.clear()\n    this.unsubscribe()\n  }\n}\n","import { isFn } from '@formily/shared'\nimport { DataField } from '..'\nimport {\n  Form,\n  Field,\n  ArrayField,\n  ObjectField,\n  VoidField,\n  Query,\n} from '../models'\nimport {\n  IFormState,\n  IFieldState,\n  IVoidFieldState,\n  GeneralField,\n  IGeneralFieldState,\n} from '../types'\n\nexport const isForm = (node: any): node is Form => {\n  return node instanceof Form\n}\n\nexport const isField = (node: any): node is Field => {\n  return node instanceof Field\n}\n\nexport const isGeneralField = (node: any): node is GeneralField => {\n  return node instanceof Field || node instanceof VoidField\n}\n\nexport const isArrayField = (node: any): node is ArrayField => {\n  return node instanceof ArrayField\n}\n\nexport const isObjectField = (node: any): node is ObjectField => {\n  return node instanceof ObjectField\n}\n\nexport const isVoidField = (node: any): node is VoidField => {\n  return node instanceof VoidField\n}\n\nexport const isFormState = (state: any): state is IFormState => {\n  if (isFn(state?.initialize)) return false\n  return state?.displayName === 'Form'\n}\n\nexport const isFieldState = (state: any): state is IFieldState => {\n  if (isFn(state?.initialize)) return false\n  return state?.displayName === 'Field'\n}\n\nexport const isGeneralFieldState = (node: any): node is IGeneralFieldState => {\n  if (isFn(node?.initialize)) return false\n  return node?.displayName?.indexOf('Field') > -1\n}\n\nexport const isArrayFieldState = (state: any): state is IFieldState => {\n  if (isFn(state?.initialize)) return false\n  return state?.displayName === 'ArrayField'\n}\n\nexport const isDataField = (node: any): node is DataField => {\n  return isField(node) || isArrayField(node) || isObjectField(node)\n}\n\nexport const isDataFieldState = (node: any) => {\n  return (\n    isFieldState(node) || isObjectFieldState(node) || isArrayFieldState(node)\n  )\n}\n\nexport const isObjectFieldState = (state: any): state is IFieldState => {\n  if (isFn(state?.initialize)) return false\n  return state?.displayName === 'ObjectField'\n}\n\nexport const isVoidFieldState = (state: any): state is IVoidFieldState => {\n  if (isFn(state?.initialize)) return false\n  return state?.displayName === 'VoidField'\n}\n\nexport const isQuery = (query: any): query is Query => {\n  return query && query instanceof Query\n}\n","import { define, batch } from '@formily/reactive'\nimport { each, FormPath } from '@formily/shared'\nimport { IFormGraph } from '../types'\nimport { Form } from './Form'\nimport {\n  isFormState,\n  isFieldState,\n  isArrayFieldState,\n  isObjectFieldState,\n} from '../shared/checkers'\n\nexport class Graph {\n  form: Form\n\n  constructor(form: Form) {\n    this.form = form\n    define(this, {\n      setGraph: batch,\n    })\n  }\n\n  getGraph = (): IFormGraph => {\n    const graph = {}\n    graph[''] = this.form.getState()\n    each(this.form.fields, (field: any, identifier) => {\n      graph[identifier] = field.getState()\n    })\n    return graph\n  }\n\n  setGraph = (graph: IFormGraph) => {\n    const form = this.form\n    const createField = (identifier: string, state: any) => {\n      const address = FormPath.parse(identifier)\n      const name = address.segments[address.segments.length - 1]\n      const basePath = address.parent()\n      if (isFieldState(state)) {\n        return this.form.createField({ name, basePath })\n      } else if (isArrayFieldState(state)) {\n        return this.form.createArrayField({ name, basePath })\n      } else if (isObjectFieldState(state)) {\n        return this.form.createObjectField({ name, basePath })\n      } else {\n        return this.form.createVoidField({ name, basePath })\n      }\n    }\n    each(graph, (state, address) => {\n      if (isFormState(state)) {\n        form.setState(state)\n      } else {\n        const field = form.fields[address]\n        if (field) {\n          field.setState(state as any)\n        } else {\n          createField(address, state).setState(state as any)\n        }\n      }\n    })\n  }\n}\n","export const ReservedProperties = {\n  form: true,\n  parent: true,\n  props: true,\n  caches: true,\n  requests: true,\n  disposers: true,\n  heart: true,\n  graph: true,\n  indexes: true,\n  fields: true,\n  lifecycles: true,\n  componentType: true,\n  componentProps: true,\n  decoratorType: true,\n  decoratorProps: true,\n}\n\nexport const ReadOnlyProperties = {\n  address: true,\n  path: true,\n  valid: true,\n  invalid: true,\n  selfValid: true,\n  selfInvalid: true,\n  errors: true,\n  successes: true,\n  warnings: true,\n  validateStatus: true,\n}\n\nconst SELF_DISPLAY = 'selfDisplay'\nconst SELF_PATTERN = 'selfPattern'\n\nexport const MutuallyExclusiveProperties = {\n  pattern: SELF_PATTERN,\n  editable: SELF_PATTERN,\n  readOnly: SELF_PATTERN,\n  readPretty: SELF_PATTERN,\n  disabled: SELF_PATTERN,\n  display: SELF_DISPLAY,\n  hidden: SELF_DISPLAY,\n  visible: SELF_DISPLAY,\n}\n\nexport const RESPONSE_REQUEST_DURATION = 100\n\nexport const GlobalState = {\n  lifecycles: [],\n  context: [],\n  effectStart: false,\n  effectEnd: false,\n  initializing: false,\n}\n\nexport const NumberIndexReg = /^\\.(\\d+)/\n","import {\n  FormPath,\n  FormPathPattern,\n  each,\n  pascalCase,\n  isFn,\n  isValid,\n  isUndef,\n  isEmpty,\n  isPlainObj,\n  isNumberLike,\n  clone,\n  toArr,\n} from '@formily/shared'\nimport {\n  ValidatorTriggerType,\n  validate,\n  parseValidatorDescriptions,\n} from '@formily/validator'\nimport {\n  autorun,\n  batch,\n  contains,\n  toJS,\n  isObservable,\n  DataChange,\n  reaction,\n  untracked,\n} from '@formily/reactive'\nimport { Field, ArrayField, Form, ObjectField } from '../models'\nimport {\n  ISpliceArrayStateProps,\n  IExchangeArrayStateProps,\n  IFieldResetOptions,\n  ISearchFeedback,\n  IFieldFeedback,\n  INodePatch,\n  GeneralField,\n  IFormFeedback,\n  LifeCycleTypes,\n  FieldMatchPattern,\n} from '../types'\nimport {\n  isArrayField,\n  isObjectField,\n  isGeneralField,\n  isDataField,\n  isForm,\n  isQuery,\n  isVoidField,\n} from './externals'\nimport {\n  RESPONSE_REQUEST_DURATION,\n  ReservedProperties,\n  MutuallyExclusiveProperties,\n  NumberIndexReg,\n  GlobalState,\n  ReadOnlyProperties,\n} from './constants'\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty\n\nconst notify = (\n  target: Form | Field,\n  formType: LifeCycleTypes,\n  fieldType: LifeCycleTypes\n) => {\n  if (isForm(target)) {\n    target.notify(formType)\n  } else {\n    target.notify(fieldType)\n  }\n}\n\nexport const isHTMLInputEvent = (event: any, stopPropagation = true) => {\n  if (event?.target) {\n    if (\n      typeof event.target === 'object' &&\n      ('value' in event.target || 'checked' in event.target)\n    )\n      return true\n    if (stopPropagation) event.stopPropagation?.()\n  }\n  return false\n}\n\nexport const getValuesFromEvent = (args: any[]) => {\n  return args.map((event) => {\n    if (event?.target) {\n      if (isValid(event.target.value)) return event.target.value\n      if (isValid(event.target.checked)) return event.target.checked\n      return\n    }\n    return event\n  })\n}\n\nexport const getTypedDefaultValue = (field: Field) => {\n  if (isArrayField(field)) return []\n  if (isObjectField(field)) return {}\n}\n\nexport const buildFieldPath = (field: GeneralField) => {\n  return buildDataPath(field.form.fields, field.address)\n}\n\nexport const buildDataPath = (\n  fields: Record<string, GeneralField>,\n  pattern: FormPath\n) => {\n  let prevArray = false\n  const segments = pattern.segments\n  const path = segments.reduce((path: string[], key: string, index: number) => {\n    const currentPath = path.concat(key)\n    const currentAddress = segments.slice(0, index + 1)\n    const current = fields[currentAddress.join('.')]\n    if (prevArray) {\n      if (!isVoidField(current)) {\n        prevArray = false\n      }\n      return path\n    }\n    if (index >= segments.length - 1) {\n      return currentPath\n    }\n    if (isVoidField(current)) {\n      const parentAddress = segments.slice(0, index)\n      const parent = fields[parentAddress.join('.')]\n      if (isArrayField(parent) && isNumberLike(key)) {\n        prevArray = true\n        return currentPath\n      }\n      return path\n    } else {\n      prevArray = false\n    }\n    return currentPath\n  }, [])\n  return new FormPath(path)\n}\n\nexport const locateNode = (field: GeneralField, address: FormPathPattern) => {\n  field.address = FormPath.parse(address)\n  field.path = buildFieldPath(field)\n  field.form.indexes[field.path.toString()] = field.address.toString()\n  return field\n}\n\nexport const patchFieldStates = (\n  target: Record<string, GeneralField>,\n  patches: INodePatch<GeneralField>[]\n) => {\n  patches.forEach(({ type, address, oldAddress, payload }) => {\n    if (type === 'remove') {\n      destroy(target, address, false)\n    } else if (type === 'update') {\n      if (payload) {\n        target[address] = payload\n        if (target[oldAddress] === payload) {\n          delete target[oldAddress]\n        }\n      }\n      if (address && payload) {\n        locateNode(payload, address)\n      }\n    }\n  })\n}\n\nexport const destroy = (\n  target: Record<string, GeneralField>,\n  address: string,\n  removeValue = true\n) => {\n  const field = target[address]\n  field?.dispose()\n  if (isDataField(field) && removeValue) {\n    const form = field.form\n    const path = field.path\n    form.deleteValuesIn(path)\n    form.deleteInitialValuesIn(path)\n  }\n  delete target[address]\n}\n\nexport const patchFormValues = (\n  form: Form,\n  path: Array<string | number>,\n  source: any\n) => {\n  const update = (path: Array<string | number>, source: any) => {\n    if (path.length) {\n      form.setValuesIn(path, clone(source))\n    } else {\n      Object.assign(form.values, clone(source))\n    }\n  }\n\n  const patch = (source: any, path: Array<string | number> = []) => {\n    const targetValue = form.getValuesIn(path)\n    const targetField = form.query(path).take()\n    const isUnVoidField = targetField && !isVoidField(targetField)\n\n    if (isUnVoidField && targetField.display === 'none') {\n      targetField.caches.value = clone(source)\n      return\n    }\n\n    if (allowAssignDefaultValue(targetValue, source)) {\n      update(path, source)\n    } else {\n      if (isEmpty(source)) return\n      if (GlobalState.initializing) return\n      if (isPlainObj(targetValue) && isPlainObj(source)) {\n        each(source, (value, key) => {\n          patch(value, path.concat(key))\n        })\n      } else {\n        if (targetField) {\n          if (isUnVoidField && !targetField.selfModified) {\n            update(path, source)\n          }\n        } else if (form.initialized) {\n          update(path, source)\n        }\n      }\n    }\n  }\n  patch(source, path)\n}\n\nexport const matchFeedback = (\n  search?: ISearchFeedback,\n  feedback?: IFormFeedback\n) => {\n  if (!search || !feedback) return false\n  if (search.type && search.type !== feedback.type) return false\n  if (search.code && search.code !== feedback.code) return false\n  if (search.path && feedback.path) {\n    if (!FormPath.parse(search.path).match(feedback.path)) return false\n  }\n  if (search.address && feedback.address) {\n    if (!FormPath.parse(search.address).match(feedback.address)) return false\n  }\n  if (search.triggerType && search.triggerType !== feedback.triggerType)\n    return false\n  return true\n}\n\nexport const queryFeedbacks = (field: Field, search?: ISearchFeedback) => {\n  return field.feedbacks.filter((feedback) => {\n    if (!feedback.messages?.length) return false\n    return matchFeedback(search, {\n      ...feedback,\n      address: field.address?.toString(),\n      path: field.path?.toString(),\n    })\n  })\n}\n\nexport const queryFeedbackMessages = (\n  field: Field,\n  search: ISearchFeedback\n) => {\n  if (!field.feedbacks.length) return []\n  return queryFeedbacks(field, search).reduce(\n    (buf, info) => (isEmpty(info.messages) ? buf : buf.concat(info.messages)),\n    []\n  )\n}\n\nexport const updateFeedback = (field: Field, feedback?: IFieldFeedback) => {\n  if (!feedback) return\n  return batch(() => {\n    if (!field.feedbacks.length) {\n      if (!feedback.messages?.length) {\n        return\n      }\n      field.feedbacks = [feedback]\n    } else {\n      const searched = queryFeedbacks(field, feedback)\n      if (searched.length) {\n        field.feedbacks = field.feedbacks.reduce((buf, item) => {\n          if (searched.includes(item)) {\n            if (feedback.messages?.length) {\n              item.messages = feedback.messages\n              return buf.concat(item)\n            } else {\n              return buf\n            }\n          } else {\n            return buf.concat(item)\n          }\n        }, [])\n        return\n      } else if (feedback.messages?.length) {\n        field.feedbacks = field.feedbacks.concat(feedback)\n      }\n    }\n  })\n}\n\nexport const validateToFeedbacks = async (\n  field: Field,\n  triggerType: ValidatorTriggerType = 'onInput'\n) => {\n  const results = await validate(field.value, field.validator, {\n    triggerType,\n    validateFirst: field.props.validateFirst ?? field.form.props.validateFirst,\n    context: { field, form: field.form },\n  })\n\n  batch(() => {\n    each(results, (messages, type) => {\n      field.setFeedback({\n        triggerType,\n        type,\n        code: pascalCase(`validate-${type}`),\n        messages: messages,\n      } as any)\n    })\n  })\n  return results\n}\n\nexport const setValidatorRule = (field: Field, name: string, value: any) => {\n  if (!isValid(value)) return\n  const validators = parseValidatorDescriptions(field.validator)\n  const hasRule = validators.some((desc) => name in desc)\n  const rule = {\n    [name]: value,\n  }\n  if (hasRule) {\n    field.validator = validators.map((desc: any) => {\n      if (isPlainObj(desc) && hasOwnProperty.call(desc, name)) {\n        desc[name] = value\n        return desc\n      }\n      return desc\n    })\n  } else {\n    if (name === 'required') {\n      field.validator = [rule].concat(validators)\n    } else {\n      field.validator = validators.concat(rule)\n    }\n  }\n}\n\nexport const spliceArrayState = (\n  field: ArrayField,\n  props?: ISpliceArrayStateProps\n) => {\n  const { startIndex, deleteCount, insertCount } = {\n    startIndex: 0,\n    deleteCount: 0,\n    insertCount: 0,\n    ...props,\n  }\n  const address = field.address.toString()\n  const addrLength = address.length\n  const form = field.form\n  const fields = form.fields\n  const fieldPatches: INodePatch<GeneralField>[] = []\n  const offset = insertCount - deleteCount\n  const isArrayChildren = (identifier: string) => {\n    return identifier.indexOf(address) === 0 && identifier.length > addrLength\n  }\n  const isAfterNode = (identifier: string) => {\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return false\n    const index = Number(number)\n    return index > startIndex + deleteCount - 1\n  }\n  const isInsertNode = (identifier: string) => {\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return false\n    const index = Number(number)\n    return index >= startIndex && index < startIndex + insertCount\n  }\n  const isDeleteNode = (identifier: string) => {\n    const preStr = identifier.substring(0, addrLength)\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return false\n    const index = Number(number)\n    return (\n      (index > startIndex &&\n        !fields[\n          `${preStr}${afterStr.replace(/^\\.\\d+/, `.${index + deleteCount}`)}`\n        ]) ||\n      index === startIndex\n    )\n  }\n  const moveIndex = (identifier: string) => {\n    if (offset === 0) return identifier\n    const preStr = identifier.substring(0, addrLength)\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return identifier\n    const index = Number(number) + offset\n    return `${preStr}${afterStr.replace(/^\\.\\d+/, `.${index}`)}`\n  }\n\n  batch(() => {\n    each(fields, (field, identifier) => {\n      if (isArrayChildren(identifier)) {\n        if (isAfterNode(identifier)) {\n          const newIdentifier = moveIndex(identifier)\n          fieldPatches.push({\n            type: 'update',\n            address: newIdentifier,\n            oldAddress: identifier,\n            payload: field,\n          })\n        }\n        if (isInsertNode(identifier) || isDeleteNode(identifier)) {\n          if (isDataField(field)) {\n            form.deleteInitialValuesIn(field.path)\n          }\n          fieldPatches.push({ type: 'remove', address: identifier })\n        }\n      }\n    })\n    patchFieldStates(fields, fieldPatches)\n  })\n  field.form.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n}\n\nexport const exchangeArrayState = (\n  field: ArrayField,\n  props: IExchangeArrayStateProps\n) => {\n  const { fromIndex, toIndex } = {\n    fromIndex: 0,\n    toIndex: 0,\n    ...props,\n  }\n  const address = field.address.toString()\n  const fields = field.form.fields\n  const addrLength = address.length\n  const fieldPatches: INodePatch<GeneralField>[] = []\n  const isArrayChildren = (identifier: string) => {\n    return identifier.indexOf(address) === 0 && identifier.length > addrLength\n  }\n\n  const isDown = fromIndex < toIndex\n\n  const isMoveNode = (identifier: string) => {\n    const afterStr = identifier.slice(address.length)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return false\n    const index = Number(number)\n    return isDown\n      ? index > fromIndex && index <= toIndex\n      : index < fromIndex && index >= toIndex\n  }\n\n  const isFromNode = (identifier: string) => {\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)?.[1]\n    if (number === undefined) return false\n    const index = Number(number)\n    return index === fromIndex\n  }\n\n  const moveIndex = (identifier: string) => {\n    const preStr = identifier.substring(0, addrLength)\n    const afterStr = identifier.substring(addrLength)\n    const number = afterStr.match(NumberIndexReg)[1]\n    const current = Number(number)\n    let index = current\n    if (index === fromIndex) {\n      index = toIndex\n    } else {\n      index += isDown ? -1 : 1\n    }\n\n    return `${preStr}${afterStr.replace(/^\\.\\d+/, `.${index}`)}`\n  }\n\n  batch(() => {\n    each(fields, (field, identifier) => {\n      if (isArrayChildren(identifier)) {\n        if (isMoveNode(identifier) || isFromNode(identifier)) {\n          const newIdentifier = moveIndex(identifier)\n          fieldPatches.push({\n            type: 'update',\n            address: newIdentifier,\n            oldAddress: identifier,\n            payload: field,\n          })\n          if (!fields[newIdentifier]) {\n            fieldPatches.push({\n              type: 'remove',\n              address: identifier,\n            })\n          }\n        }\n      }\n    })\n    patchFieldStates(fields, fieldPatches)\n  })\n  field.form.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n}\n\nexport const cleanupArrayChildren = (field: ArrayField, start: number) => {\n  const address = field.address.toString()\n  const fields = field.form.fields\n\n  const isArrayChildren = (identifier: string) => {\n    return (\n      identifier.indexOf(address) === 0 && identifier.length > address.length\n    )\n  }\n\n  const isNeedCleanup = (identifier: string) => {\n    const afterStr = identifier.slice(address.length)\n    const numStr = afterStr.match(NumberIndexReg)?.[1]\n    if (numStr === undefined) return false\n    const index = Number(numStr)\n    return index >= start\n  }\n\n  batch(() => {\n    each(fields, (field, identifier) => {\n      if (isArrayChildren(identifier) && isNeedCleanup(identifier)) {\n        field.destroy()\n      }\n    })\n  })\n}\n\nexport const cleanupObjectChildren = (field: ObjectField, keys: string[]) => {\n  if (keys.length === 0) return\n  const address = field.address.toString()\n  const fields = field.form.fields\n\n  const isObjectChildren = (identifier: string) => {\n    return (\n      identifier.indexOf(address) === 0 && identifier.length > address.length\n    )\n  }\n\n  const isNeedCleanup = (identifier: string) => {\n    const afterStr = identifier.slice(address.length)\n    const key = afterStr.match(/^\\.([^.]+)/)?.[1]\n    if (key === undefined) return false\n    return keys.includes(key)\n  }\n\n  batch(() => {\n    each(fields, (field, identifier) => {\n      if (isObjectChildren(identifier) && isNeedCleanup(identifier)) {\n        field.destroy()\n      }\n    })\n  })\n}\n\nexport const initFieldUpdate = batch.scope.bound((field: GeneralField) => {\n  const form = field.form\n  const updates = FormPath.ensureIn(form, 'requests.updates', [])\n  const indexes = FormPath.ensureIn(form, 'requests.updateIndexes', {})\n  for (let index = 0; index < updates.length; index++) {\n    const { pattern, callbacks } = updates[index]\n    let removed = false\n    if (field.match(pattern)) {\n      callbacks.forEach((callback) => {\n        field.setState(callback)\n      })\n      if (!pattern.isWildMatchPattern && !pattern.isMatchPattern) {\n        updates.splice(index--, 1)\n        removed = true\n      }\n    }\n    if (!removed) {\n      indexes[pattern.toString()] = index\n    } else {\n      delete indexes[pattern.toString()]\n    }\n  }\n})\n\nexport const subscribeUpdate = (\n  form: Form,\n  pattern: FormPath,\n  callback: (...args: any[]) => void\n) => {\n  const updates = FormPath.ensureIn(form, 'requests.updates', [])\n  const indexes = FormPath.ensureIn(form, 'requests.updateIndexes', {})\n  const id = pattern.toString()\n  const current = indexes[id]\n  if (isValid(current)) {\n    if (\n      updates[current] &&\n      !updates[current].callbacks.some((fn: any) =>\n        fn.toString() === callback.toString() ? fn === callback : false\n      )\n    ) {\n      updates[current].callbacks.push(callback)\n    }\n  } else {\n    indexes[id] = updates.length\n    updates.push({\n      pattern,\n      callbacks: [callback],\n    })\n  }\n}\n\nexport const deserialize = (model: any, setter: any) => {\n  if (!model) return\n  if (isFn(setter)) {\n    setter(model)\n  } else {\n    for (let key in setter) {\n      if (!hasOwnProperty.call(setter, key)) continue\n      if (ReadOnlyProperties[key] || ReservedProperties[key]) continue\n      const MutuallyExclusiveKey = MutuallyExclusiveProperties[key]\n      if (\n        MutuallyExclusiveKey &&\n        hasOwnProperty.call(setter, MutuallyExclusiveKey) &&\n        !isValid(setter[MutuallyExclusiveKey])\n      )\n        continue\n      const value = setter[key]\n      if (isFn(value)) continue\n      model[key] = value\n    }\n  }\n  return model\n}\n\nexport const serialize = (model: any, getter?: any) => {\n  if (isFn(getter)) {\n    return getter(model)\n  } else {\n    const results = {}\n    for (let key in model) {\n      if (!hasOwnProperty.call(model, key)) continue\n      if (ReservedProperties[key]) continue\n      if (key === 'address' || key === 'path') {\n        results[key] = model[key].toString()\n        continue\n      }\n      const value = model[key]\n      if (isFn(value)) continue\n      results[key] = toJS(value)\n    }\n    return results\n  }\n}\n\nexport const createChildrenFeedbackFilter = (field: Field) => {\n  const identifier = field.address?.toString()\n  return ({ address }: IFormFeedback) => {\n    return address === identifier || address.indexOf(identifier + '.') === 0\n  }\n}\n\nexport const createStateSetter = (model: any) => {\n  return batch.bound((setter?: any) => deserialize(model, setter))\n}\n\nexport const createStateGetter = (model: any) => {\n  return (getter?: any) => serialize(model, getter)\n}\n\nexport const createBatchStateSetter = (form: Form) => {\n  return batch.bound((pattern: FieldMatchPattern, payload?: any) => {\n    if (isQuery(pattern)) {\n      pattern.forEach((field) => {\n        field.setState(payload)\n      })\n    } else if (isGeneralField(pattern)) {\n      pattern.setState(payload)\n    } else {\n      let matchCount = 0,\n        path = FormPath.parse(pattern)\n      form.query(path).forEach((field) => {\n        field.setState(payload)\n        matchCount++\n      })\n\n      if (matchCount === 0 || path.isWildMatchPattern) {\n        subscribeUpdate(form, path, payload)\n      }\n    }\n  })\n}\n\nexport const createBatchStateGetter = (form: Form) => {\n  return (pattern: FieldMatchPattern, payload?: any) => {\n    if (isQuery(pattern)) {\n      return pattern.take(payload)\n    } else if (isGeneralField(pattern)) {\n      return (pattern as any).getState(payload)\n    } else {\n      return form.query(pattern).take((field: any) => {\n        return field.getState(payload)\n      })\n    }\n  }\n}\n\nexport const triggerFormInitialValuesChange = (\n  form: Form,\n  change: DataChange\n) => {\n  if (Array.isArray(change.object) && change.key === 'length') return\n  if (\n    contains(form.initialValues, change.object) ||\n    form.initialValues === change.value\n  ) {\n    if (change.type === 'add' || change.type === 'set') {\n      patchFormValues(form, change.path.slice(1), change.value)\n    }\n    if (form.initialized) {\n      form.notify(LifeCycleTypes.ON_FORM_INITIAL_VALUES_CHANGE)\n    }\n  }\n}\n\nexport const triggerFormValuesChange = (form: Form, change: DataChange) => {\n  if (Array.isArray(change.object) && change.key === 'length') return\n  if (\n    (contains(form.values, change.object) || form.values === change.value) &&\n    form.initialized\n  ) {\n    form.notify(LifeCycleTypes.ON_FORM_VALUES_CHANGE)\n  }\n}\n\nexport const setValidating = (target: Form | Field, validating: boolean) => {\n  clearTimeout(target.requests.validate)\n  if (validating) {\n    target.requests.validate = setTimeout(() => {\n      batch(() => {\n        target.validating = validating\n        notify(\n          target,\n          LifeCycleTypes.ON_FORM_VALIDATING,\n          LifeCycleTypes.ON_FIELD_VALIDATING\n        )\n      })\n    }, RESPONSE_REQUEST_DURATION)\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_VALIDATE_START,\n      LifeCycleTypes.ON_FIELD_VALIDATE_START\n    )\n  } else {\n    if (target.validating !== validating) {\n      target.validating = validating\n    }\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_VALIDATE_END,\n      LifeCycleTypes.ON_FIELD_VALIDATE_END\n    )\n  }\n}\n\nexport const setSubmitting = (target: Form | Field, submitting: boolean) => {\n  clearTimeout(target.requests.submit)\n  if (submitting) {\n    target.requests.submit = setTimeout(() => {\n      batch(() => {\n        target.submitting = submitting\n        notify(\n          target,\n          LifeCycleTypes.ON_FORM_SUBMITTING,\n          LifeCycleTypes.ON_FIELD_SUBMITTING\n        )\n      })\n    }, RESPONSE_REQUEST_DURATION)\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_START,\n      LifeCycleTypes.ON_FIELD_SUBMIT_START\n    )\n  } else {\n    if (target.submitting !== submitting) {\n      target.submitting = submitting\n    }\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_END,\n      LifeCycleTypes.ON_FIELD_SUBMIT_END\n    )\n  }\n}\n\nexport const setLoading = (target: Form | Field, loading: boolean) => {\n  clearTimeout(target.requests.loading)\n  if (loading) {\n    target.requests.loading = setTimeout(() => {\n      batch(() => {\n        target.loading = loading\n        notify(\n          target,\n          LifeCycleTypes.ON_FORM_LOADING,\n          LifeCycleTypes.ON_FIELD_LOADING\n        )\n      })\n    }, RESPONSE_REQUEST_DURATION)\n  } else if (target.loading !== loading) {\n    target.loading = loading\n  }\n}\n\nexport const batchSubmit = async <T>(\n  target: Form | Field,\n  onSubmit?: (values: any) => Promise<T> | void\n): Promise<T> => {\n  const getValues = (target: Form | Field) => {\n    if (isForm(target)) {\n      return toJS(target.values)\n    }\n    return toJS(target.value)\n  }\n  target.setSubmitting(true)\n  try {\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_START,\n      LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_START\n    )\n    await target.validate()\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_SUCCESS,\n      LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_SUCCESS\n    )\n  } catch (e) {\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_FAILED,\n      LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_FAILED\n    )\n  }\n  notify(\n    target,\n    LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_END,\n    LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_END\n  )\n  let results: any\n  try {\n    if (target.invalid) {\n      throw target.errors\n    }\n    if (isFn(onSubmit)) {\n      results = await onSubmit(getValues(target))\n    } else {\n      results = getValues(target)\n    }\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_SUCCESS,\n      LifeCycleTypes.ON_FIELD_SUBMIT_SUCCESS\n    )\n  } catch (e) {\n    target.setSubmitting(false)\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT_FAILED,\n      LifeCycleTypes.ON_FIELD_SUBMIT_FAILED\n    )\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_SUBMIT,\n      LifeCycleTypes.ON_FIELD_SUBMIT\n    )\n    throw e\n  }\n  target.setSubmitting(false)\n  notify(target, LifeCycleTypes.ON_FORM_SUBMIT, LifeCycleTypes.ON_FIELD_SUBMIT)\n  return results\n}\n\nexport const batchValidate = async (\n  target: Form | Field,\n  pattern: FormPathPattern,\n  triggerType?: ValidatorTriggerType\n) => {\n  if (isForm(target)) target.setValidating(true)\n  else {\n    if (target.pattern !== 'editable' || target.display !== 'visible') return\n  }\n  const tasks = []\n  target.query(pattern).forEach((field) => {\n    if (!isVoidField(field)) {\n      tasks.push(validateSelf(field, triggerType, field === target))\n    }\n  })\n  await Promise.all(tasks)\n  if (isForm(target)) target.setValidating(false)\n  if (target.invalid) {\n    notify(\n      target,\n      LifeCycleTypes.ON_FORM_VALIDATE_FAILED,\n      LifeCycleTypes.ON_FIELD_VALIDATE_FAILED\n    )\n    throw target.errors\n  }\n  notify(\n    target,\n    LifeCycleTypes.ON_FORM_VALIDATE_SUCCESS,\n    LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS\n  )\n}\n\nexport const batchReset = async (\n  target: Form | Field,\n  pattern: FormPathPattern,\n  options?: IFieldResetOptions\n) => {\n  const tasks = []\n  target.query(pattern).forEach((field) => {\n    if (!isVoidField(field)) {\n      tasks.push(resetSelf(field, options, target === field))\n    }\n  })\n  if (isForm(target)) {\n    target.modified = false\n  }\n  notify(target, LifeCycleTypes.ON_FORM_RESET, LifeCycleTypes.ON_FIELD_RESET)\n  await Promise.all(tasks)\n}\n\nexport const validateSelf = batch.bound(\n  async (target: Field, triggerType?: ValidatorTriggerType, noEmit = false) => {\n    const start = () => {\n      setValidating(target, true)\n    }\n    const end = () => {\n      setValidating(target, false)\n      if (noEmit) return\n      if (target.selfValid) {\n        target.notify(LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS)\n      } else {\n        target.notify(LifeCycleTypes.ON_FIELD_VALIDATE_FAILED)\n      }\n    }\n\n    if (target.pattern !== 'editable' || target.display !== 'visible') return {}\n    start()\n    if (!triggerType) {\n      const allTriggerTypes = parseValidatorDescriptions(\n        target.validator\n      ).reduce(\n        (types, desc) =>\n          types.indexOf(desc.triggerType) > -1\n            ? types\n            : types.concat(desc.triggerType),\n        []\n      )\n      const results = {}\n      for (let i = 0; i < allTriggerTypes.length; i++) {\n        const payload = await validateToFeedbacks(target, allTriggerTypes[i])\n        each(payload, (result, key) => {\n          results[key] = results[key] || []\n          results[key] = results[key].concat(result)\n        })\n      }\n      end()\n      return results\n    }\n    const results = await validateToFeedbacks(target, triggerType)\n    end()\n    return results\n  }\n)\n\nexport const resetSelf = batch.bound(\n  async (target: Field, options?: IFieldResetOptions, noEmit = false) => {\n    const typedDefaultValue = getTypedDefaultValue(target)\n    target.modified = false\n    target.selfModified = false\n    target.visited = false\n    target.feedbacks = []\n    target.inputValue = typedDefaultValue\n    target.inputValues = []\n    target.caches = {}\n    if (!isUndef(target.value)) {\n      if (options?.forceClear) {\n        target.value = typedDefaultValue\n      } else {\n        target.value = toJS(\n          !isUndef(target.initialValue)\n            ? target.initialValue\n            : typedDefaultValue\n        )\n      }\n    }\n    if (!noEmit) {\n      target.notify(LifeCycleTypes.ON_FIELD_RESET)\n    }\n    if (options?.validate) {\n      return await validateSelf(target)\n    }\n  }\n)\n\nexport const modifySelf = (target: Field) => {\n  if (target.selfModified) return\n  target.selfModified = true\n  target.modified = true\n  let parent = target.parent\n  while (parent) {\n    if (isDataField(parent)) {\n      if (parent.modified) return\n      parent.modified = true\n    }\n    parent = parent.parent\n  }\n  target.form.modified = true\n}\n\nexport const getValidFormValues = (values: any) => {\n  if (isObservable(values)) return values\n  return clone(values || {})\n}\n\nexport const getValidFieldDefaultValue = (value: any, initialValue: any) => {\n  if (allowAssignDefaultValue(value, initialValue)) return clone(initialValue)\n  return value\n}\n\nexport const allowAssignDefaultValue = (target: any, source: any) => {\n  const isEmptyTarget = target !== null && isEmpty(target)\n  const isEmptySource = source !== null && isEmpty(source)\n  const isValidTarget = !isUndef(target)\n  const isValidSource = !isUndef(source)\n  if (!isValidTarget) {\n    if (isValidSource) {\n      return true\n    }\n    return false\n  }\n\n  if (typeof target === typeof source) {\n    if (target === '') return false\n    if (target === 0) return false\n  }\n\n  if (isEmptyTarget) {\n    if (isEmptySource) {\n      return false\n    } else {\n      return true\n    }\n  }\n  return false\n}\n\nexport const createReactions = (field: GeneralField) => {\n  const reactions = toArr(field.props.reactions)\n  field.form.addEffects(field, () => {\n    reactions.forEach((reaction) => {\n      if (isFn(reaction)) {\n        field.disposers.push(\n          autorun(\n            batch.scope.bound(() => {\n              if (field.destroyed) return\n              reaction(field)\n            })\n          )\n        )\n      }\n    })\n  })\n}\n\nexport const createReaction = <T>(\n  tracker: () => T,\n  scheduler?: (value: T) => void\n) => {\n  return reaction(tracker, untracked.bound(scheduler))\n}\n\nexport const initializeStart = () => {\n  GlobalState.initializing = true\n}\n\nexport const initializeEnd = () => {\n  batch.endpoint(() => {\n    GlobalState.initializing = false\n  })\n}\n","import { FormPath, isFn, each, FormPathPattern } from '@formily/shared'\nimport { buildDataPath } from '../shared/internals'\nimport { GeneralField, IGeneralFieldState, IQueryProps } from '../types'\nimport { Form } from './Form'\n\nconst output = (\n  field: GeneralField,\n  taker: (field: GeneralField, address: FormPath) => any\n) => {\n  if (!field) return\n  if (isFn(taker)) {\n    return taker(field, field.address)\n  }\n  return field\n}\n\nconst takeMatchPattern = (form: Form, pattern: FormPath) => {\n  const identifier = pattern.toString()\n  const indexIdentifier = form.indexes[identifier]\n  const absoluteField = form.fields[identifier]\n  const indexField = form.fields[indexIdentifier]\n  if (absoluteField) {\n    return identifier\n  } else if (indexField) {\n    return indexIdentifier\n  }\n}\n\nexport class Query {\n  private pattern: FormPath\n  private addresses: string[] = []\n  private form: Form\n  constructor(props: IQueryProps) {\n    this.pattern = FormPath.parse(props.pattern, props.base)\n    this.form = props.form\n    if (!this.pattern.isMatchPattern) {\n      const matched = takeMatchPattern(\n        this.form,\n        this.pattern.haveRelativePattern\n          ? buildDataPath(props.form.fields, this.pattern)\n          : this.pattern\n      )\n      if (matched) {\n        this.addresses = [matched]\n      }\n    } else {\n      each(this.form.fields, (field, address) => {\n        if (field.match(this.pattern)) {\n          this.addresses.push(address)\n        }\n      })\n    }\n  }\n\n  take(): GeneralField\n  take<Result>(\n    getter: (field: GeneralField, address: FormPath) => Result\n  ): Result\n  take(taker?: any): any {\n    return output(this.form.fields[this.addresses[0]], taker)\n  }\n\n  map(): GeneralField[]\n  map<Result>(\n    iterator?: (field: GeneralField, address: FormPath) => Result\n  ): Result[]\n  map(iterator?: any): any {\n    return this.addresses.map((address) =>\n      output(this.form.fields[address], iterator)\n    )\n  }\n\n  forEach<Result>(\n    iterator: (field: GeneralField, address: FormPath) => Result\n  ) {\n    return this.addresses.forEach((address) =>\n      output(this.form.fields[address], iterator)\n    )\n  }\n\n  reduce<Result>(\n    reducer: (value: Result, field: GeneralField, address: FormPath) => Result,\n    initial?: Result\n  ): Result {\n    return this.addresses.reduce(\n      (value, address) =>\n        output(this.form.fields[address], (field, address) =>\n          reducer(value, field, address)\n        ),\n      initial\n    )\n  }\n\n  get<K extends keyof IGeneralFieldState>(key: K): IGeneralFieldState[K] {\n    const results: any = this.take()\n    if (results) {\n      return results[key]\n    }\n  }\n\n  getIn(pattern?: FormPathPattern) {\n    return FormPath.getIn(this.take(), pattern)\n  }\n\n  value() {\n    return this.get('value')\n  }\n\n  initialValue() {\n    return this.get('initialValue')\n  }\n}\n","import { FormPath, FormPathPattern, isValid, toArr } from '@formily/shared'\nimport {\n  JSXComponent,\n  LifeCycleTypes,\n  FieldDisplayTypes,\n  FieldPatternTypes,\n  FieldDecorator,\n  FieldComponent,\n} from '../types'\nimport { locateNode, destroy, initFieldUpdate } from '../shared/internals'\nimport { Form } from './Form'\nimport { Query } from './Query'\n\nexport class BaseField<Decorator = any, Component = any, TextType = any> {\n  title: TextType\n  description: TextType\n\n  selfDisplay: FieldDisplayTypes\n  selfPattern: FieldPatternTypes\n  initialized: boolean\n  mounted: boolean\n  unmounted: boolean\n\n  content: any\n\n  data: any\n\n  decoratorType: Decorator\n  decoratorProps: Record<string, any>\n  componentType: Component\n  componentProps: Record<string, any>\n\n  designable: boolean\n  address: FormPath\n  path: FormPath\n  form: Form\n\n  disposers: (() => void)[] = []\n\n  locate(address: FormPathPattern) {\n    this.form.fields[address.toString()] = this as any\n    locateNode(this as any, address)\n  }\n\n  get indexes() {\n    return this.path.transform(/\\d/, (...args) =>\n      args.map((index) => Number(index))\n    )\n  }\n\n  get index() {\n    return this.indexes[this.indexes.length - 1]\n  }\n\n  get component() {\n    return [this.componentType, this.componentProps]\n  }\n\n  set component(value: FieldComponent<Component>) {\n    const component = toArr(value)\n    this.componentType = component[0]\n    this.componentProps = component[1] || {}\n  }\n\n  get decorator() {\n    return [this.decoratorType, this.decoratorProps]\n  }\n\n  set decorator(value: FieldDecorator<Decorator>) {\n    const decorator = toArr(value)\n    this.decoratorType = decorator[0]\n    this.decoratorProps = decorator[1] || {}\n  }\n\n  get parent() {\n    let parent = this.address.parent()\n    let identifier = parent.toString()\n    while (!this.form.fields[identifier]) {\n      parent = parent.parent()\n      identifier = parent.toString()\n      if (!identifier) return\n    }\n    return this.form.fields[identifier]\n  }\n\n  get display(): FieldDisplayTypes {\n    const parentDisplay = (this.parent as any)?.display\n    if (parentDisplay && parentDisplay !== 'visible') {\n      if (this.selfDisplay && this.selfDisplay !== 'visible')\n        return this.selfDisplay\n      return parentDisplay\n    }\n    if (isValid(this.selfDisplay)) return this.selfDisplay\n    return parentDisplay || this.form.display || 'visible'\n  }\n\n  get pattern(): FieldPatternTypes {\n    const parentPattern: FieldPatternTypes =\n      (this.parent as any)?.pattern || this.form.pattern || 'editable'\n    const selfPattern = this.selfPattern\n    if (isValid(selfPattern)) {\n      if (parentPattern === 'readPretty' && selfPattern !== 'editable') {\n        return parentPattern\n      }\n      return selfPattern\n    }\n    return parentPattern\n  }\n\n  get editable() {\n    return this.pattern === 'editable'\n  }\n\n  get disabled() {\n    return this.pattern === 'disabled'\n  }\n\n  get readOnly() {\n    return this.pattern === 'readOnly'\n  }\n\n  get readPretty() {\n    return this.pattern === 'readPretty'\n  }\n\n  get hidden() {\n    return this.display === 'hidden'\n  }\n\n  get visible() {\n    return this.display === 'visible'\n  }\n\n  get destroyed() {\n    return !this.form.fields[this.address.toString()]\n  }\n\n  set hidden(hidden: boolean) {\n    if (!isValid(hidden)) return\n    if (hidden) {\n      this.display = 'hidden'\n    } else {\n      this.display = 'visible'\n    }\n  }\n\n  set visible(visible: boolean) {\n    if (!isValid(visible)) return\n    if (visible) {\n      this.display = 'visible'\n    } else {\n      this.display = 'none'\n    }\n  }\n\n  set editable(editable: boolean) {\n    if (!isValid(editable)) return\n    if (editable) {\n      this.pattern = 'editable'\n    } else {\n      this.pattern = 'readPretty'\n    }\n  }\n\n  set readOnly(readOnly: boolean) {\n    if (!isValid(readOnly)) return\n    if (readOnly) {\n      this.pattern = 'readOnly'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  set disabled(disabled: boolean) {\n    if (!isValid(disabled)) return\n    if (disabled) {\n      this.pattern = 'disabled'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  set readPretty(readPretty: boolean) {\n    if (!isValid(readPretty)) return\n    if (readPretty) {\n      this.pattern = 'readPretty'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  set pattern(pattern: FieldPatternTypes) {\n    this.selfPattern = pattern\n  }\n\n  set display(display: FieldDisplayTypes) {\n    this.selfDisplay = display\n  }\n\n  setTitle = (title?: TextType) => {\n    this.title = title\n  }\n\n  setDescription = (description?: TextType) => {\n    this.description = description\n  }\n\n  setDisplay = (type?: FieldDisplayTypes) => {\n    this.display = type\n  }\n\n  setPattern = (type?: FieldPatternTypes) => {\n    this.pattern = type\n  }\n\n  setComponent = <C extends JSXComponent, ComponentProps extends object = {}>(\n    component?: C,\n    props?: ComponentProps\n  ) => {\n    if (component) {\n      this.componentType = component as any\n    }\n    if (props) {\n      this.componentProps = this.componentProps || {}\n      Object.assign(this.componentProps, props)\n    }\n  }\n\n  setComponentProps = <ComponentProps extends object = {}>(\n    props?: ComponentProps\n  ) => {\n    if (props) {\n      this.componentProps = this.componentProps || {}\n      Object.assign(this.componentProps, props)\n    }\n  }\n\n  setDecorator = <D extends JSXComponent, ComponentProps extends object = {}>(\n    component?: D,\n    props?: ComponentProps\n  ) => {\n    if (component) {\n      this.decoratorType = component as any\n    }\n    if (props) {\n      this.decoratorProps = this.decoratorProps || {}\n      Object.assign(this.decoratorProps, props)\n    }\n  }\n\n  setDecoratorProps = <ComponentProps extends object = {}>(\n    props?: ComponentProps\n  ) => {\n    if (props) {\n      this.decoratorProps = this.decoratorProps || {}\n      Object.assign(this.decoratorProps, props)\n    }\n  }\n\n  setData = (data: any) => {\n    this.data = data\n  }\n\n  setContent = (content: any) => {\n    this.content = content\n  }\n\n  onInit = () => {\n    this.initialized = true\n    initFieldUpdate(this as any)\n    this.notify(LifeCycleTypes.ON_FIELD_INIT)\n  }\n\n  onMount = () => {\n    this.mounted = true\n    this.unmounted = false\n    this.notify(LifeCycleTypes.ON_FIELD_MOUNT)\n  }\n\n  onUnmount = () => {\n    this.mounted = false\n    this.unmounted = true\n    this.notify(LifeCycleTypes.ON_FIELD_UNMOUNT)\n  }\n\n  query = (pattern: FormPathPattern | RegExp) => {\n    return new Query({\n      pattern,\n      base: this.address,\n      form: this.form,\n    })\n  }\n\n  notify = (type: LifeCycleTypes, payload?: any) => {\n    return this.form.notify(type, payload ?? this)\n  }\n\n  dispose = () => {\n    this.disposers.forEach((dispose) => {\n      dispose()\n    })\n    this.form.removeEffects(this)\n  }\n\n  destroy = (forceClear = true) => {\n    destroy(this.form.fields, this.address.toString(), forceClear)\n  }\n\n  match = (pattern: FormPathPattern) => {\n    return FormPath.parse(pattern).matchAliasGroup(this.address, this.path)\n  }\n}\n","import {\n  isValid,\n  isEmpty,\n  toArr,\n  FormPathPattern,\n  isArr,\n} from '@formily/shared'\nimport {\n  ValidatorTriggerType,\n  parseValidatorDescriptions,\n} from '@formily/validator'\nimport { define, observable, batch, toJS, action } from '@formily/reactive'\nimport {\n  JSXComponent,\n  LifeCycleTypes,\n  IFieldFeedback,\n  FeedbackMessage,\n  IFieldCaches,\n  IFieldRequests,\n  FieldValidator,\n  FieldDataSource,\n  ISearchFeedback,\n  IFieldProps,\n  IFieldResetOptions,\n  IFieldState,\n  IModelSetter,\n  IModelGetter,\n} from '../types'\nimport {\n  updateFeedback,\n  queryFeedbacks,\n  allowAssignDefaultValue,\n  queryFeedbackMessages,\n  getValuesFromEvent,\n  createReactions,\n  createStateSetter,\n  createStateGetter,\n  isHTMLInputEvent,\n  setValidatorRule,\n  batchValidate,\n  batchSubmit,\n  batchReset,\n  setValidating,\n  setSubmitting,\n  setLoading,\n  validateSelf,\n  modifySelf,\n  getValidFieldDefaultValue,\n  initializeStart,\n  initializeEnd,\n  createChildrenFeedbackFilter,\n  createReaction,\n} from '../shared/internals'\nimport { Form } from './Form'\nimport { BaseField } from './BaseField'\nimport { IFormFeedback } from '..'\nexport class Field<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any,\n  TextType = any,\n  ValueType = any\n> extends BaseField<Decorator, Component, TextType> {\n  displayName = 'Field'\n\n  props: IFieldProps<Decorator, Component, TextType, ValueType>\n\n  loading: boolean\n  validating: boolean\n  submitting: boolean\n  active: boolean\n  visited: boolean\n  selfModified: boolean\n  modified: boolean\n  inputValue: ValueType\n  inputValues: any[]\n  dataSource: FieldDataSource\n  validator: FieldValidator\n  feedbacks: IFieldFeedback[]\n  caches: IFieldCaches = {}\n  requests: IFieldRequests = {}\n\n  constructor(\n    address: FormPathPattern,\n    props: IFieldProps<Decorator, Component, TextType, ValueType>,\n    form: Form,\n    designable: boolean\n  ) {\n    super()\n    this.form = form\n    this.props = props\n    this.designable = designable\n    initializeStart()\n    this.locate(address)\n    this.initialize()\n    this.makeObservable()\n    this.makeReactive()\n    this.onInit()\n    initializeEnd()\n  }\n\n  protected initialize() {\n    this.initialized = false\n    this.loading = false\n    this.validating = false\n    this.submitting = false\n    this.selfModified = false\n    this.active = false\n    this.visited = false\n    this.mounted = false\n    this.unmounted = false\n    this.inputValues = []\n    this.inputValue = null\n    this.feedbacks = []\n    this.title = this.props.title\n    this.description = this.props.description\n    this.display = this.props.display\n    this.pattern = this.props.pattern\n    this.editable = this.props.editable\n    this.disabled = this.props.disabled\n    this.readOnly = this.props.readOnly\n    this.readPretty = this.props.readPretty\n    this.visible = this.props.visible\n    this.hidden = this.props.hidden\n    this.dataSource = this.props.dataSource\n    this.validator = this.props.validator\n    this.required = this.props.required\n    this.content = this.props.content\n    this.value = getValidFieldDefaultValue(\n      this.props.value,\n      this.props.initialValue\n    )\n    this.initialValue = this.props.initialValue\n    this.data = this.props.data\n    this.decorator = toArr(this.props.decorator)\n    this.component = toArr(this.props.component)\n  }\n\n  protected makeObservable() {\n    if (this.designable) return\n    define(this, {\n      path: observable.ref,\n      title: observable.ref,\n      description: observable.ref,\n      dataSource: observable.ref,\n      selfDisplay: observable.ref,\n      selfPattern: observable.ref,\n      loading: observable.ref,\n      validating: observable.ref,\n      submitting: observable.ref,\n      selfModified: observable.ref,\n      modified: observable.ref,\n      active: observable.ref,\n      visited: observable.ref,\n      initialized: observable.ref,\n      mounted: observable.ref,\n      unmounted: observable.ref,\n      inputValue: observable.ref,\n      inputValues: observable.ref,\n      decoratorType: observable.ref,\n      componentType: observable.ref,\n      content: observable.ref,\n      feedbacks: observable.ref,\n      decoratorProps: observable,\n      componentProps: observable,\n      validator: observable.shallow,\n      data: observable.shallow,\n      component: observable.computed,\n      decorator: observable.computed,\n      errors: observable.computed,\n      warnings: observable.computed,\n      successes: observable.computed,\n      valid: observable.computed,\n      invalid: observable.computed,\n      selfErrors: observable.computed,\n      selfWarnings: observable.computed,\n      selfSuccesses: observable.computed,\n      selfValid: observable.computed,\n      selfInvalid: observable.computed,\n      validateStatus: observable.computed,\n      value: observable.computed,\n      initialValue: observable.computed,\n      display: observable.computed,\n      pattern: observable.computed,\n      required: observable.computed,\n      hidden: observable.computed,\n      visible: observable.computed,\n      disabled: observable.computed,\n      readOnly: observable.computed,\n      readPretty: observable.computed,\n      editable: observable.computed,\n      indexes: observable.computed,\n      setDisplay: action,\n      setTitle: action,\n      setDescription: action,\n      setDataSource: action,\n      setValue: action,\n      setPattern: action,\n      setInitialValue: action,\n      setLoading: action,\n      setValidating: action,\n      setFeedback: action,\n      setSelfErrors: action,\n      setSelfWarnings: action,\n      setSelfSuccesses: action,\n      setValidator: action,\n      setRequired: action,\n      setComponent: action,\n      setComponentProps: action,\n      setDecorator: action,\n      setDecoratorProps: action,\n      setData: action,\n      setContent: action,\n      validate: action,\n      reset: action,\n      onInit: batch,\n      onInput: batch,\n      onMount: batch,\n      onUnmount: batch,\n      onFocus: batch,\n      onBlur: batch,\n    })\n  }\n\n  protected makeReactive() {\n    if (this.designable) return\n    this.disposers.push(\n      createReaction(\n        () => this.value,\n        (value) => {\n          this.notify(LifeCycleTypes.ON_FIELD_VALUE_CHANGE)\n          if (isValid(value) && this.selfModified && !this.caches.inputting) {\n            validateSelf(this)\n          }\n        }\n      ),\n      createReaction(\n        () => this.initialValue,\n        () => {\n          this.notify(LifeCycleTypes.ON_FIELD_INITIAL_VALUE_CHANGE)\n        }\n      ),\n      createReaction(\n        () => this.display,\n        (display) => {\n          const value = this.value\n          if (display === 'visible') {\n            if (isEmpty(value)) {\n              this.setValue(this.caches.value)\n              this.caches.value = undefined\n            }\n          } else {\n            this.caches.value = toJS(value) ?? toJS(this.initialValue)\n            if (display === 'none') {\n              this.form.deleteValuesIn(this.path)\n            }\n          }\n          if (display === 'none' || display === 'hidden') {\n            this.setFeedback({\n              type: 'error',\n              messages: [],\n            })\n          }\n        }\n      ),\n      createReaction(\n        () => this.pattern,\n        (pattern) => {\n          if (pattern !== 'editable') {\n            this.setFeedback({\n              type: 'error',\n              messages: [],\n            })\n          }\n        }\n      )\n    )\n    createReactions(this)\n  }\n\n  get selfErrors(): FeedbackMessage {\n    return queryFeedbackMessages(this, {\n      type: 'error',\n    })\n  }\n\n  get errors(): IFormFeedback[] {\n    return this.form.errors.filter(createChildrenFeedbackFilter(this))\n  }\n\n  get selfWarnings(): FeedbackMessage {\n    return queryFeedbackMessages(this, {\n      type: 'warning',\n    })\n  }\n\n  get warnings(): IFormFeedback[] {\n    return this.form.warnings.filter(createChildrenFeedbackFilter(this))\n  }\n\n  get selfSuccesses(): FeedbackMessage {\n    return queryFeedbackMessages(this, {\n      type: 'success',\n    })\n  }\n\n  get successes(): IFormFeedback[] {\n    return this.form.successes.filter(createChildrenFeedbackFilter(this))\n  }\n\n  get selfValid() {\n    return !this.selfErrors.length\n  }\n\n  get valid() {\n    return !this.errors.length\n  }\n\n  get selfInvalid() {\n    return !this.selfValid\n  }\n\n  get invalid() {\n    return !this.valid\n  }\n\n  get value(): ValueType {\n    return this.form.getValuesIn(this.path)\n  }\n\n  get initialValue(): ValueType {\n    return this.form.getInitialValuesIn(this.path)\n  }\n\n  get required() {\n    const validators = isArr(this.validator)\n      ? this.validator\n      : parseValidatorDescriptions(this.validator)\n    return validators.some((desc) => !!desc?.['required'])\n  }\n\n  get validateStatus() {\n    if (this.validating) return 'validating'\n    if (this.selfInvalid) return 'error'\n    if (this.selfWarnings.length) return 'warning'\n    if (this.selfSuccesses.length) return 'success'\n  }\n\n  set required(required: boolean) {\n    if (this.required === required) return\n    this.setValidatorRule('required', required)\n  }\n\n  set value(value: ValueType) {\n    if (this.destroyed) return\n    if (!this.initialized) {\n      if (this.display === 'none') {\n        this.caches.value = value\n        return\n      }\n      if (!allowAssignDefaultValue(this.value, value) && !this.designable) {\n        return\n      }\n    }\n    this.form.setValuesIn(this.path, value)\n  }\n\n  set initialValue(initialValue: ValueType) {\n    if (this.destroyed) return\n    if (!this.initialized) {\n      if (\n        !allowAssignDefaultValue(this.initialValue, initialValue) &&\n        !this.designable\n      ) {\n        return\n      }\n    }\n    this.form.setInitialValuesIn(this.path, initialValue)\n  }\n\n  set selfErrors(messages: FeedbackMessage) {\n    this.setFeedback({\n      type: 'error',\n      code: 'EffectError',\n      messages,\n    })\n  }\n\n  set selfWarnings(messages: FeedbackMessage) {\n    this.setFeedback({\n      type: 'warning',\n      code: 'EffectWarning',\n      messages,\n    })\n  }\n\n  set selfSuccesses(messages: FeedbackMessage) {\n    this.setFeedback({\n      type: 'success',\n      code: 'EffectSuccess',\n      messages,\n    })\n  }\n\n  setDataSource = (dataSource?: FieldDataSource) => {\n    this.dataSource = dataSource\n  }\n\n  setFeedback = (feedback?: IFieldFeedback) => {\n    updateFeedback(this, feedback)\n  }\n\n  setSelfErrors = (messages?: FeedbackMessage) => {\n    this.selfErrors = messages\n  }\n\n  setSelfWarnings = (messages?: FeedbackMessage) => {\n    this.selfWarnings = messages\n  }\n\n  setSelfSuccesses = (messages?: FeedbackMessage) => {\n    this.selfSuccesses = messages\n  }\n\n  setValidator = (validator?: FieldValidator) => {\n    this.validator = validator\n  }\n\n  setValidatorRule = (name: string, value: any) => {\n    setValidatorRule(this, name, value)\n  }\n\n  setRequired = (required?: boolean) => {\n    this.required = required\n  }\n\n  setValue = (value?: ValueType) => {\n    this.value = value\n  }\n\n  setInitialValue = (initialValue?: ValueType) => {\n    this.initialValue = initialValue\n  }\n\n  setLoading = (loading?: boolean) => {\n    setLoading(this, loading)\n  }\n\n  setValidating = (validating?: boolean) => {\n    setValidating(this, validating)\n  }\n\n  setSubmitting = (submitting?: boolean) => {\n    setSubmitting(this, submitting)\n  }\n\n  setState: IModelSetter<IFieldState> = createStateSetter(this)\n\n  getState: IModelGetter<IFieldState> = createStateGetter(this)\n\n  onInput = async (...args: any[]) => {\n    const getValues = (args: any[]) => {\n      if (args[0]?.target) {\n        if (!isHTMLInputEvent(args[0])) return args\n      }\n      return getValuesFromEvent(args)\n    }\n    const values = getValues(args)\n    const value = values[0]\n    this.caches.inputting = true\n    this.inputValue = value\n    this.inputValues = values\n    this.value = value\n    this.modify()\n    this.notify(LifeCycleTypes.ON_FIELD_INPUT_VALUE_CHANGE)\n    this.notify(LifeCycleTypes.ON_FORM_INPUT_CHANGE, this.form)\n    await validateSelf(this, 'onInput')\n    this.caches.inputting = false\n  }\n\n  onFocus = async (...args: any[]) => {\n    if (args[0]?.target) {\n      if (!isHTMLInputEvent(args[0], false)) return\n    }\n    this.active = true\n    this.visited = true\n    await validateSelf(this, 'onFocus')\n  }\n\n  onBlur = async (...args: any[]) => {\n    if (args[0]?.target) {\n      if (!isHTMLInputEvent(args[0], false)) return\n    }\n    this.active = false\n    await validateSelf(this, 'onBlur')\n  }\n\n  validate = (triggerType?: ValidatorTriggerType) => {\n    return batchValidate(this, `${this.address}.**`, triggerType)\n  }\n\n  submit = <T>(onSubmit?: (values: any) => Promise<T> | void): Promise<T> => {\n    return batchSubmit(this, onSubmit)\n  }\n\n  reset = (options?: IFieldResetOptions) => {\n    return batchReset(this, `${this.address}.**`, options)\n  }\n\n  queryFeedbacks = (search?: ISearchFeedback): IFieldFeedback[] => {\n    return queryFeedbacks(this, search)\n  }\n\n  modify = () => modifySelf(this)\n}\n","import { isFn, isValid } from '@formily/shared'\nimport { LifeCycle, Form } from '../models'\nimport { AnyFunction } from '../types'\nimport { isForm } from './checkers'\nimport { GlobalState } from './constants'\n\nexport const createEffectHook = <\n  F extends (payload: any, ...ctxs: any[]) => AnyFunction\n>(\n  type: string,\n  callback?: F\n) => {\n  return (...args: Parameters<ReturnType<F>>) => {\n    if (GlobalState.effectStart) {\n      GlobalState.lifecycles.push(\n        new LifeCycle(type, (payload, ctx) => {\n          if (isFn(callback)) {\n            callback(payload, ctx, ...GlobalState.context)(...args)\n          }\n        })\n      )\n    } else {\n      throw new Error(\n        'Effect hooks cannot be used in asynchronous function body'\n      )\n    }\n  }\n}\n\nexport const createEffectContext = <T = any>(defaultValue?: T) => {\n  let index: number\n  return {\n    provide(value?: T) {\n      if (GlobalState.effectStart) {\n        index = GlobalState.context.length\n        GlobalState.context[index] = isValid(value) ? value : defaultValue\n      } else {\n        throw new Error(\n          'Provide method cannot be used in asynchronous function body'\n        )\n      }\n    },\n    consume(): T {\n      if (!GlobalState.effectStart) {\n        throw new Error(\n          'Consume method cannot be used in asynchronous function body'\n        )\n      }\n      return GlobalState.context[index]\n    },\n  }\n}\n\nconst FormEffectContext = createEffectContext<Form>()\n\nexport const useEffectForm = FormEffectContext.consume\n\nexport const runEffects = <Context>(\n  context?: Context,\n  ...args: ((context: Context) => void)[]\n): LifeCycle[] => {\n  GlobalState.lifecycles = []\n  GlobalState.context = []\n  GlobalState.effectStart = true\n  GlobalState.effectEnd = false\n  if (isForm(context)) {\n    FormEffectContext.provide(context)\n  }\n  args.forEach((effects) => {\n    if (isFn(effects)) {\n      effects(context)\n    }\n  })\n  GlobalState.context = []\n  GlobalState.effectStart = false\n  GlobalState.effectEnd = true\n  return GlobalState.lifecycles\n}\n","import { isArr } from '@formily/shared'\nimport { action, reaction } from '@formily/reactive'\nimport {\n  spliceArrayState,\n  exchangeArrayState,\n  cleanupArrayChildren,\n} from '../shared/internals'\nimport { Field } from './Field'\nimport { Form } from './Form'\nimport { JSXComponent, IFieldProps, FormPathPattern } from '../types'\n\nexport class ArrayField<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any\n> extends Field<Decorator, Component, any, any[]> {\n  displayName = 'ArrayField'\n\n  constructor(\n    address: FormPathPattern,\n    props: IFieldProps<Decorator, Component>,\n    form: Form,\n    designable: boolean\n  ) {\n    super(address, props, form, designable)\n    this.makeAutoCleanable()\n  }\n\n  protected makeAutoCleanable() {\n    this.disposers.push(\n      reaction(\n        () => this.value?.length,\n        (newLength, oldLength) => {\n          if (oldLength && !newLength) {\n            cleanupArrayChildren(this, 0)\n          } else if (newLength < oldLength) {\n            cleanupArrayChildren(this, newLength)\n          }\n        }\n      )\n    )\n  }\n\n  push = (...items: any[]) => {\n    return action(() => {\n      if (!isArr(this.value)) {\n        this.value = []\n      }\n      this.value.push(...items)\n      return this.onInput(this.value)\n    })\n  }\n\n  pop = () => {\n    if (!isArr(this.value)) return\n    return action(() => {\n      const index = this.value.length - 1\n      spliceArrayState(this, {\n        startIndex: index,\n        deleteCount: 1,\n      })\n      this.value.pop()\n      return this.onInput(this.value)\n    })\n  }\n\n  insert = (index: number, ...items: any[]) => {\n    return action(() => {\n      if (!isArr(this.value)) {\n        this.value = []\n      }\n      spliceArrayState(this, {\n        startIndex: index,\n        insertCount: items.length,\n      })\n      this.value.splice(index, 0, ...items)\n      return this.onInput(this.value)\n    })\n  }\n\n  remove = (index: number) => {\n    if (!isArr(this.value)) return\n    return action(() => {\n      spliceArrayState(this, {\n        startIndex: index,\n        deleteCount: 1,\n      })\n      this.value.splice(index, 1)\n      return this.onInput(this.value)\n    })\n  }\n\n  shift = () => {\n    if (!isArr(this.value)) return\n    return action(() => {\n      this.value.shift()\n      return this.onInput(this.value)\n    })\n  }\n\n  unshift = (...items: any[]) => {\n    return action(() => {\n      if (!isArr(this.value)) {\n        this.value = []\n      }\n      spliceArrayState(this, {\n        startIndex: 0,\n        insertCount: items.length,\n      })\n      this.value.unshift(...items)\n      return this.onInput(this.value)\n    })\n  }\n\n  move = (fromIndex: number, toIndex: number) => {\n    if (!isArr(this.value)) return\n    if (fromIndex === toIndex) return\n    return action(() => {\n      const fromItem = this.value[fromIndex]\n      this.value.splice(fromIndex, 1)\n      this.value.splice(toIndex, 0, fromItem)\n      exchangeArrayState(this, {\n        fromIndex,\n        toIndex,\n      })\n      return this.onInput(this.value)\n    })\n  }\n\n  moveUp = (index: number) => {\n    if (!isArr(this.value)) return\n    return this.move(index, index - 1 < 0 ? this.value.length - 1 : index - 1)\n  }\n\n  moveDown = (index: number) => {\n    if (!isArr(this.value)) return\n    return this.move(index, index + 1 >= this.value.length ? 0 : index + 1)\n  }\n}\n","import { reaction } from '@formily/reactive'\nimport { cleanupObjectChildren } from '../shared/internals'\nimport { JSXComponent, IFieldProps, FormPathPattern } from '../types'\nimport { Field } from './Field'\nimport { Form } from './Form'\n\nexport class ObjectField<\n  Decorator extends JSXComponent = any,\n  Component extends JSXComponent = any\n> extends Field<Decorator, Component, any, Record<string, any>> {\n  displayName = 'ObjectField'\n  private additionalProperties: string[] = []\n  constructor(\n    address: FormPathPattern,\n    props: IFieldProps<Decorator, Component>,\n    form: Form,\n    designable: boolean\n  ) {\n    super(address, props, form, designable)\n    this.makeAutoCleanable()\n  }\n\n  protected makeAutoCleanable() {\n    this.disposers.push(\n      reaction(\n        () => Object.keys(this.value || {}),\n        (newKeys) => {\n          const filterKeys = this.additionalProperties.filter(\n            (key) => !newKeys.includes(key)\n          )\n          cleanupObjectChildren(this, filterKeys)\n        }\n      )\n    )\n  }\n\n  addProperty = (key: string, value: any) => {\n    this.form.setValuesIn(this.path.concat(key), value)\n    this.additionalProperties.push(key)\n    return this.onInput(this.value)\n  }\n\n  removeProperty = (key: string) => {\n    this.form.deleteValuesIn(this.path.concat(key))\n    this.additionalProperties.splice(this.additionalProperties.indexOf(key), 1)\n    return this.onInput(this.value)\n  }\n\n  existProperty = (key: string) => {\n    return this.form.existValuesIn(this.path.concat(key))\n  }\n}\n","import { toArr, FormPathPattern } from '@formily/shared'\nimport { define, observable, batch, action } from '@formily/reactive'\nimport {\n  createReactions,\n  createStateSetter,\n  createStateGetter,\n  initializeStart,\n  initializeEnd,\n} from '../shared/internals'\nimport {\n  IModelSetter,\n  IModelGetter,\n  IVoidFieldProps,\n  IVoidFieldState,\n} from '../types'\nimport { Form } from './Form'\nimport { BaseField } from './BaseField'\n\nexport class VoidField<\n  Decorator = any,\n  Component = any,\n  TextType = any\n> extends BaseField<Decorator, Component, TextType> {\n  displayName: 'VoidField' = 'VoidField'\n  props: IVoidFieldProps<Decorator, Component>\n\n  constructor(\n    address: FormPathPattern,\n    props: IVoidFieldProps<Decorator, Component>,\n    form: Form,\n    designable: boolean\n  ) {\n    super()\n    this.form = form\n    this.props = props\n    this.designable = designable\n    initializeStart()\n    this.locate(address)\n    this.initialize()\n    this.makeObservable()\n    this.makeReactive()\n    this.onInit()\n    initializeEnd()\n  }\n\n  protected initialize() {\n    this.mounted = false\n    this.unmounted = false\n    this.initialized = false\n    this.title = this.props.title\n    this.description = this.props.description\n    this.pattern = this.props.pattern\n    this.display = this.props.display\n    this.hidden = this.props.hidden\n    this.editable = this.props.editable\n    this.disabled = this.props.disabled\n    this.readOnly = this.props.readOnly\n    this.readPretty = this.props.readPretty\n    this.visible = this.props.visible\n    this.content = this.props.content\n    this.data = this.props.data\n    this.decorator = toArr(this.props.decorator)\n    this.component = toArr(this.props.component)\n  }\n\n  protected makeObservable() {\n    if (this.designable) return\n    define(this, {\n      path: observable.ref,\n      title: observable.ref,\n      description: observable.ref,\n      selfDisplay: observable.ref,\n      selfPattern: observable.ref,\n      initialized: observable.ref,\n      mounted: observable.ref,\n      unmounted: observable.ref,\n      decoratorType: observable.ref,\n      componentType: observable.ref,\n      content: observable.ref,\n      data: observable.shallow,\n      decoratorProps: observable,\n      componentProps: observable,\n      display: observable.computed,\n      pattern: observable.computed,\n      hidden: observable.computed,\n      visible: observable.computed,\n      disabled: observable.computed,\n      readOnly: observable.computed,\n      readPretty: observable.computed,\n      editable: observable.computed,\n      component: observable.computed,\n      decorator: observable.computed,\n      indexes: observable.computed,\n      setTitle: action,\n      setDescription: action,\n      setDisplay: action,\n      setPattern: action,\n      setComponent: action,\n      setComponentProps: action,\n      setDecorator: action,\n      setDecoratorProps: action,\n      setData: action,\n      setContent: action,\n      onInit: batch,\n      onMount: batch,\n      onUnmount: batch,\n    })\n  }\n\n  protected makeReactive() {\n    if (this.designable) return\n    createReactions(this)\n  }\n\n  setState: IModelSetter<IVoidFieldState> = createStateSetter(this)\n\n  getState: IModelGetter<IVoidFieldState> = createStateGetter(this)\n}\n","import { define, observable, batch, action, observe } from '@formily/reactive'\nimport {\n  FormPath,\n  FormPathPattern,\n  isValid,\n  uid,\n  globalThisPolyfill,\n  merge,\n  isPlainObj,\n  isArr,\n  isObj,\n} from '@formily/shared'\nimport { Heart } from './Heart'\nimport { Field } from './Field'\nimport {\n  JSXComponent,\n  LifeCycleTypes,\n  HeartSubscriber,\n  FormPatternTypes,\n  IFormRequests,\n  IFormFeedback,\n  ISearchFeedback,\n  IFormGraph,\n  IFormProps,\n  IFieldResetOptions,\n  IFormFields,\n  IFieldFactoryProps,\n  IVoidFieldFactoryProps,\n  IFormState,\n  IModelGetter,\n  IModelSetter,\n  IFieldStateGetter,\n  IFieldStateSetter,\n  FormDisplayTypes,\n  IFormMergeStrategy,\n} from '../types'\nimport {\n  createStateGetter,\n  createStateSetter,\n  createBatchStateSetter,\n  createBatchStateGetter,\n  triggerFormInitialValuesChange,\n  triggerFormValuesChange,\n  batchValidate,\n  batchReset,\n  batchSubmit,\n  setValidating,\n  setSubmitting,\n  setLoading,\n  getValidFormValues,\n} from '../shared/internals'\nimport { isVoidField } from '../shared/checkers'\nimport { runEffects } from '../shared/effective'\nimport { ArrayField } from './ArrayField'\nimport { ObjectField } from './ObjectField'\nimport { VoidField } from './VoidField'\nimport { Query } from './Query'\nimport { Graph } from './Graph'\n\nconst DEV_TOOLS_HOOK = '__FORMILY_DEV_TOOLS_HOOK__'\n\nexport class Form<ValueType extends object = any> {\n  displayName = 'Form'\n  id: string\n  initialized: boolean\n  validating: boolean\n  submitting: boolean\n  loading: boolean\n  modified: boolean\n  pattern: FormPatternTypes\n  display: FormDisplayTypes\n  values: ValueType\n  initialValues: ValueType\n  mounted: boolean\n  unmounted: boolean\n  props: IFormProps<ValueType>\n  heart: Heart\n  graph: Graph\n  fields: IFormFields = {}\n  requests: IFormRequests = {}\n  indexes: Record<string, string> = {}\n  disposers: (() => void)[] = []\n\n  constructor(props: IFormProps<ValueType>) {\n    this.initialize(props)\n    this.makeObservable()\n    this.makeReactive()\n    this.makeValues()\n    this.onInit()\n  }\n\n  protected initialize(props: IFormProps<ValueType>) {\n    this.id = uid()\n    this.props = { ...props }\n    this.initialized = false\n    this.submitting = false\n    this.validating = false\n    this.loading = false\n    this.modified = false\n    this.mounted = false\n    this.unmounted = false\n    this.display = this.props.display || 'visible'\n    this.pattern = this.props.pattern || 'editable'\n    this.editable = this.props.editable\n    this.disabled = this.props.disabled\n    this.readOnly = this.props.readOnly\n    this.readPretty = this.props.readPretty\n    this.visible = this.props.visible\n    this.hidden = this.props.hidden\n    this.graph = new Graph(this)\n    this.heart = new Heart({\n      lifecycles: this.lifecycles,\n      context: this,\n    })\n  }\n\n  protected makeValues() {\n    this.values = getValidFormValues(this.props.values)\n    this.initialValues = getValidFormValues(this.props.initialValues)\n  }\n\n  protected makeObservable() {\n    define(this, {\n      fields: observable.shallow,\n      initialized: observable.ref,\n      validating: observable.ref,\n      submitting: observable.ref,\n      loading: observable.ref,\n      modified: observable.ref,\n      pattern: observable.ref,\n      display: observable.ref,\n      mounted: observable.ref,\n      unmounted: observable.ref,\n      values: observable,\n      initialValues: observable,\n      valid: observable.computed,\n      invalid: observable.computed,\n      errors: observable.computed,\n      warnings: observable.computed,\n      successes: observable.computed,\n      hidden: observable.computed,\n      visible: observable.computed,\n      editable: observable.computed,\n      readOnly: observable.computed,\n      readPretty: observable.computed,\n      disabled: observable.computed,\n      setValues: action,\n      setValuesIn: action,\n      setInitialValues: action,\n      setInitialValuesIn: action,\n      setPattern: action,\n      setDisplay: action,\n      setState: action,\n      deleteInitialValuesIn: action,\n      deleteValuesIn: action,\n      setSubmitting: action,\n      setValidating: action,\n      setFormGraph: action,\n      clearFormGraph: action,\n      reset: action,\n      submit: action,\n      validate: action,\n      onMount: batch,\n      onUnmount: batch,\n      onInit: batch,\n    })\n  }\n\n  protected makeReactive() {\n    this.disposers.push(\n      observe(\n        this,\n        (change) => {\n          triggerFormInitialValuesChange(this, change)\n          triggerFormValuesChange(this, change)\n        },\n        true\n      )\n    )\n  }\n\n  get valid() {\n    return !this.invalid\n  }\n\n  get invalid() {\n    return this.errors.length > 0\n  }\n\n  get errors() {\n    return this.queryFeedbacks({\n      type: 'error',\n    })\n  }\n\n  get warnings() {\n    return this.queryFeedbacks({\n      type: 'warning',\n    })\n  }\n\n  get successes() {\n    return this.queryFeedbacks({\n      type: 'success',\n    })\n  }\n\n  get lifecycles() {\n    return runEffects(this, this.props.effects)\n  }\n\n  get hidden() {\n    return this.display === 'hidden'\n  }\n\n  get visible() {\n    return this.display === 'visible'\n  }\n\n  set hidden(hidden: boolean) {\n    if (!isValid(hidden)) return\n    if (hidden) {\n      this.display = 'hidden'\n    } else {\n      this.display = 'visible'\n    }\n  }\n\n  set visible(visible: boolean) {\n    if (!isValid(visible)) return\n    if (visible) {\n      this.display = 'visible'\n    } else {\n      this.display = 'none'\n    }\n  }\n\n  get editable() {\n    return this.pattern === 'editable'\n  }\n\n  set editable(editable) {\n    if (!isValid(editable)) return\n    if (editable) {\n      this.pattern = 'editable'\n    } else {\n      this.pattern = 'readPretty'\n    }\n  }\n\n  get readOnly() {\n    return this.pattern === 'readOnly'\n  }\n\n  set readOnly(readOnly) {\n    if (!isValid(readOnly)) return\n    if (readOnly) {\n      this.pattern = 'readOnly'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  get disabled() {\n    return this.pattern === 'disabled'\n  }\n\n  set disabled(disabled) {\n    if (!isValid(disabled)) return\n    if (disabled) {\n      this.pattern = 'disabled'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  get readPretty() {\n    return this.pattern === 'readPretty'\n  }\n\n  set readPretty(readPretty) {\n    if (!isValid(readPretty)) return\n    if (readPretty) {\n      this.pattern = 'readPretty'\n    } else {\n      this.pattern = 'editable'\n    }\n  }\n\n  /** 创建字段 **/\n\n  createField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IFieldFactoryProps<Decorator, Component>\n  ): Field<Decorator, Component> => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new Field(address, props, this, this.props.designable)\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as any\n  }\n\n  createArrayField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IFieldFactoryProps<Decorator, Component>\n  ): ArrayField<Decorator, Component> => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new ArrayField(\n          address,\n          {\n            ...props,\n            value: isArr(props.value) ? props.value : [],\n          },\n          this,\n          this.props.designable\n        )\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as any\n  }\n\n  createObjectField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IFieldFactoryProps<Decorator, Component>\n  ): ObjectField<Decorator, Component> => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new ObjectField(\n          address,\n          {\n            ...props,\n            value: isObj(props.value) ? props.value : {},\n          },\n          this,\n          this.props.designable\n        )\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as any\n  }\n\n  createVoidField = <\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(\n    props: IVoidFieldFactoryProps<Decorator, Component>\n  ): VoidField<Decorator, Component> => {\n    const address = FormPath.parse(props.basePath).concat(props.name)\n    const identifier = address.toString()\n    if (!identifier) return\n    if (!this.fields[identifier] || this.props.designable) {\n      batch(() => {\n        new VoidField(address, props, this, this.props.designable)\n      })\n      this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE)\n    }\n    return this.fields[identifier] as any\n  }\n\n  /** 状态操作模型 **/\n\n  setValues = (values: any, strategy: IFormMergeStrategy = 'merge') => {\n    if (!isPlainObj(values)) return\n    if (strategy === 'merge' || strategy === 'deepMerge') {\n      this.values = merge(this.values, values, {\n        arrayMerge: (target, source) => source,\n      })\n    } else if (strategy === 'shallowMerge') {\n      this.values = Object.assign(this.values, values)\n    } else {\n      this.values = values as any\n    }\n  }\n\n  setInitialValues = (\n    initialValues: any,\n    strategy: IFormMergeStrategy = 'merge'\n  ) => {\n    if (!isPlainObj(initialValues)) return\n    if (strategy === 'merge' || strategy === 'deepMerge') {\n      this.initialValues = merge(this.initialValues, initialValues, {\n        arrayMerge: (target, source) => source,\n      })\n    } else if (strategy === 'shallowMerge') {\n      this.initialValues = Object.assign(this.initialValues, initialValues)\n    } else {\n      this.initialValues = initialValues as any\n    }\n  }\n\n  setValuesIn = (pattern: FormPathPattern, value: any) => {\n    FormPath.setIn(this.values, pattern, value)\n  }\n\n  deleteValuesIn = (pattern: FormPathPattern) => {\n    FormPath.deleteIn(this.values, pattern)\n  }\n\n  existValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.existIn(this.values, pattern)\n  }\n\n  getValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.getIn(this.values, pattern)\n  }\n\n  setInitialValuesIn = (pattern: FormPathPattern, initialValue: any) => {\n    FormPath.setIn(this.initialValues, pattern, initialValue)\n  }\n\n  deleteInitialValuesIn = (pattern: FormPathPattern) => {\n    FormPath.deleteIn(this.initialValues, pattern)\n  }\n\n  existInitialValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.existIn(this.initialValues, pattern)\n  }\n\n  getInitialValuesIn = (pattern: FormPathPattern) => {\n    return FormPath.getIn(this.initialValues, pattern)\n  }\n\n  setLoading = (loading: boolean) => {\n    setLoading(this, loading)\n  }\n\n  setSubmitting = (submitting: boolean) => {\n    setSubmitting(this, submitting)\n  }\n\n  setValidating = (validating: boolean) => {\n    setValidating(this, validating)\n  }\n\n  setDisplay = (display: FormDisplayTypes) => {\n    this.display = display\n  }\n\n  setPattern = (pattern: FormPatternTypes) => {\n    this.pattern = pattern\n  }\n\n  addEffects = (id: any, effects: IFormProps['effects']) => {\n    if (!this.heart.hasLifeCycles(id)) {\n      this.heart.addLifeCycles(id, runEffects(this, effects))\n    }\n  }\n\n  removeEffects = (id: any) => {\n    this.heart.removeLifeCycles(id)\n  }\n\n  setEffects = (effects: IFormProps['effects']) => {\n    this.heart.setLifeCycles(runEffects(this, effects))\n  }\n\n  clearErrors = (pattern: FormPathPattern = '*') => {\n    this.query(pattern).forEach((field) => {\n      if (!isVoidField(field)) {\n        field.setFeedback({\n          type: 'error',\n          messages: [],\n        })\n      }\n    })\n  }\n\n  clearWarnings = (pattern: FormPathPattern = '*') => {\n    this.query(pattern).forEach((field) => {\n      if (!isVoidField(field)) {\n        field.setFeedback({\n          type: 'warning',\n          messages: [],\n        })\n      }\n    })\n  }\n\n  clearSuccesses = (pattern: FormPathPattern = '*') => {\n    this.query(pattern).forEach((field) => {\n      if (!isVoidField(field)) {\n        field.setFeedback({\n          type: 'success',\n          messages: [],\n        })\n      }\n    })\n  }\n\n  query = (pattern: FormPathPattern): Query => {\n    return new Query({\n      pattern,\n      base: '',\n      form: this,\n    })\n  }\n\n  queryFeedbacks = (search: ISearchFeedback): IFormFeedback[] => {\n    return this.query(search.address || search.path || '*').reduce(\n      (messages, field) => {\n        if (isVoidField(field)) return messages\n        return messages.concat(\n          field\n            .queryFeedbacks(search)\n            .map((feedback) => ({\n              ...feedback,\n              address: field.address.toString(),\n              path: field.path.toString(),\n            }))\n            .filter((feedback) => feedback.messages.length > 0)\n        )\n      },\n      []\n    )\n  }\n\n  notify = (type: string, payload?: any) => {\n    this.heart.publish(type, payload ?? this)\n  }\n\n  subscribe = (subscriber?: HeartSubscriber) => {\n    return this.heart.subscribe(subscriber)\n  }\n\n  unsubscribe = (id: number) => {\n    this.heart.unsubscribe(id)\n  }\n\n  /**事件钩子**/\n\n  onInit = () => {\n    this.initialized = true\n    this.notify(LifeCycleTypes.ON_FORM_INIT)\n  }\n\n  onMount = () => {\n    this.mounted = true\n    this.notify(LifeCycleTypes.ON_FORM_MOUNT)\n    if (globalThisPolyfill[DEV_TOOLS_HOOK] && !this.props.designable) {\n      globalThisPolyfill[DEV_TOOLS_HOOK].inject(this.id, this)\n    }\n  }\n\n  onUnmount = () => {\n    this.notify(LifeCycleTypes.ON_FORM_UNMOUNT)\n    this.query('*').forEach((field) => field.destroy(false))\n    this.disposers.forEach((dispose) => dispose())\n    this.unmounted = true\n    this.indexes = {}\n    this.heart.clear()\n    if (globalThisPolyfill[DEV_TOOLS_HOOK] && !this.props.designable) {\n      globalThisPolyfill[DEV_TOOLS_HOOK].unmount(this.id)\n    }\n  }\n\n  setState: IModelSetter<IFormState<ValueType>> = createStateSetter(this)\n\n  getState: IModelGetter<IFormState<ValueType>> = createStateGetter(this)\n\n  setFormState: IModelSetter<IFormState<ValueType>> = createStateSetter(this)\n\n  getFormState: IModelGetter<IFormState<ValueType>> = createStateGetter(this)\n\n  setFieldState: IFieldStateSetter = createBatchStateSetter(this)\n\n  getFieldState: IFieldStateGetter = createBatchStateGetter(this)\n\n  getFormGraph = () => {\n    return this.graph.getGraph()\n  }\n\n  setFormGraph = (graph: IFormGraph) => {\n    this.graph.setGraph(graph)\n  }\n\n  clearFormGraph = (pattern: FormPathPattern = '*', forceClear = true) => {\n    this.query(pattern).forEach((field) => {\n      field.destroy(forceClear)\n    })\n  }\n\n  validate = (pattern: FormPathPattern = '*') => {\n    return batchValidate(this, pattern)\n  }\n\n  submit = <T>(onSubmit?: (values: any) => Promise<T> | void): Promise<T> => {\n    return batchSubmit(this, onSubmit)\n  }\n\n  reset = (pattern: FormPathPattern = '*', options?: IFieldResetOptions) => {\n    return batchReset(this, pattern, options)\n  }\n}\n","import { autorun, batch } from '@formily/reactive'\nimport { Form } from '../models'\nimport { LifeCycleTypes } from '../types'\nimport { createEffectHook } from '../shared/effective'\n\nfunction createFormEffect(type: LifeCycleTypes) {\n  return createEffectHook(\n    type,\n    (form: Form) => (callback: (form: Form) => void) => {\n      batch(() => {\n        callback(form)\n      })\n    }\n  )\n}\n\nexport const onFormInit = createFormEffect(LifeCycleTypes.ON_FORM_INIT)\nexport const onFormMount = createFormEffect(LifeCycleTypes.ON_FORM_MOUNT)\nexport const onFormUnmount = createFormEffect(LifeCycleTypes.ON_FORM_UNMOUNT)\nexport const onFormValuesChange = createFormEffect(\n  LifeCycleTypes.ON_FORM_VALUES_CHANGE\n)\nexport const onFormInitialValuesChange = createFormEffect(\n  LifeCycleTypes.ON_FORM_INITIAL_VALUES_CHANGE\n)\nexport const onFormInputChange = createFormEffect(\n  LifeCycleTypes.ON_FORM_INPUT_CHANGE\n)\nexport const onFormSubmit = createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT)\nexport const onFormReset = createFormEffect(LifeCycleTypes.ON_FORM_RESET)\nexport const onFormSubmitStart = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_START\n)\nexport const onFormSubmitEnd = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_END\n)\nexport const onFormSubmitSuccess = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_SUCCESS\n)\nexport const onFormSubmitFailed = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_FAILED\n)\nexport const onFormSubmitValidateStart = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_START\n)\nexport const onFormSubmitValidateSuccess = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_SUCCESS\n)\nexport const onFormSubmitValidateFailed = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_FAILED\n)\nexport const onFormSubmitValidateEnd = createFormEffect(\n  LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_END\n)\nexport const onFormValidateStart = createFormEffect(\n  LifeCycleTypes.ON_FORM_VALIDATE_START\n)\nexport const onFormValidateSuccess = createFormEffect(\n  LifeCycleTypes.ON_FORM_VALIDATE_SUCCESS\n)\nexport const onFormValidateFailed = createFormEffect(\n  LifeCycleTypes.ON_FORM_VALIDATE_FAILED\n)\nexport const onFormValidateEnd = createFormEffect(\n  LifeCycleTypes.ON_FORM_VALIDATE_END\n)\nexport const onFormGraphChange = createFormEffect(\n  LifeCycleTypes.ON_FORM_GRAPH_CHANGE\n)\nexport const onFormLoading = createFormEffect(LifeCycleTypes.ON_FORM_LOADING)\nexport function onFormReact(callback?: (form: Form) => void) {\n  let dispose = null\n  onFormInit((form) => {\n    dispose = autorun(() => {\n      callback(form)\n    })\n  })\n  onFormUnmount(() => {\n    dispose()\n  })\n}\n","import { FormPath, isFn, toArr } from '@formily/shared'\nimport { autorun, reaction, batch } from '@formily/reactive'\nimport { Form } from '../models'\nimport {\n  LifeCycleTypes,\n  FormPathPattern,\n  GeneralField,\n  DataField,\n  IFieldState,\n} from '../types'\nimport { createEffectHook, useEffectForm } from '../shared/effective'\n\nfunction createFieldEffect<Result extends GeneralField = GeneralField>(\n  type: LifeCycleTypes\n) {\n  return createEffectHook(\n    type,\n    (field: Result, form: Form) =>\n      (\n        pattern: FormPathPattern,\n        callback: (field: Result, form: Form) => void\n      ) => {\n        if (\n          FormPath.parse(pattern).matchAliasGroup(field.address, field.path)\n        ) {\n          batch(() => {\n            callback(field, form)\n          })\n        }\n      }\n  )\n}\nconst _onFieldInit = createFieldEffect(LifeCycleTypes.ON_FIELD_INIT)\nexport const onFieldMount = createFieldEffect(LifeCycleTypes.ON_FIELD_MOUNT)\nexport const onFieldUnmount = createFieldEffect(LifeCycleTypes.ON_FIELD_UNMOUNT)\nexport const onFieldValueChange = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALUE_CHANGE\n)\nexport const onFieldInitialValueChange = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_INITIAL_VALUE_CHANGE\n)\nexport const onFieldInputValueChange = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_INPUT_VALUE_CHANGE\n)\nexport const onFieldValidateStart = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_START\n)\nexport const onFieldValidateEnd = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_END\n)\nexport const onFieldValidating = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATING\n)\nexport const onFieldValidateFailed = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_FAILED\n)\nexport const onFieldValidateSuccess = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS\n)\nexport const onFieldSubmit = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT\n)\nexport const onFieldSubmitStart = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_START\n)\nexport const onFieldSubmitEnd = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_END\n)\nexport const onFieldSubmitValidateStart = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_START\n)\nexport const onFieldSubmitValidateEnd = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_END\n)\nexport const onFieldSubmitSuccess = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_SUCCESS\n)\nexport const onFieldSubmitFailed = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_FAILED\n)\nexport const onFieldSubmitValidateSuccess = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_SUCCESS\n)\nexport const onFieldSubmitValidateFailed = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_FAILED\n)\nexport const onFieldReset = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_RESET\n)\nexport const onFieldLoading = createFieldEffect<DataField>(\n  LifeCycleTypes.ON_FIELD_LOADING\n)\n\nexport function onFieldInit(\n  pattern: FormPathPattern,\n  callback?: (field: GeneralField, form: Form) => void\n) {\n  const form = useEffectForm()\n  const count = form.query(pattern).reduce((count, field) => {\n    callback(field, form)\n    return count + 1\n  }, 0)\n  if (count === 0) {\n    _onFieldInit(pattern, callback)\n  }\n}\n\nexport function onFieldReact(\n  pattern: FormPathPattern,\n  callback?: (field: GeneralField, form: Form) => void\n) {\n  onFieldInit(pattern, (field, form) => {\n    field.disposers.push(\n      autorun(() => {\n        if (isFn(callback)) callback(field, form)\n      })\n    )\n  })\n}\nexport function onFieldChange(\n  pattern: FormPathPattern,\n  callback?: (field: GeneralField, form: Form) => void\n): void\nexport function onFieldChange(\n  pattern: FormPathPattern,\n  watches: (keyof IFieldState)[],\n  callback?: (field: GeneralField, form: Form) => void\n): void\nexport function onFieldChange(\n  pattern: FormPathPattern,\n  watches: any,\n  callback?: (field: GeneralField, form: Form) => void\n): void {\n  if (isFn(watches)) {\n    callback = watches\n    watches = ['value']\n  } else {\n    watches = watches || ['value']\n  }\n  onFieldInit(pattern, (field, form) => {\n    if (isFn(callback)) callback(field, form)\n    const dispose = reaction(\n      () => {\n        return toArr(watches).map((key) => {\n          return field[key]\n        })\n      },\n      () => {\n        if (isFn(callback)) callback(field, form)\n      }\n    )\n    field.disposers.push(dispose)\n  })\n}\n","import { FormPath } from '@formily/shared'\nimport { Form } from '../models'\nimport { IFormProps } from '../types'\nimport {\n  getValidateLocaleIOSCode,\n  setValidateLanguage,\n  registerValidateFormats,\n  registerValidateLocale,\n  registerValidateMessageTemplateEngine,\n  registerValidateRules,\n} from '@formily/validator'\nimport {\n  createEffectHook,\n  createEffectContext,\n  useEffectForm,\n} from './effective'\nimport {\n  isArrayField,\n  isArrayFieldState,\n  isDataField,\n  isDataFieldState,\n  isField,\n  isFieldState,\n  isForm,\n  isFormState,\n  isGeneralField,\n  isGeneralFieldState,\n  isObjectField,\n  isObjectFieldState,\n  isQuery,\n  isVoidField,\n  isVoidFieldState,\n} from './checkers'\n\nconst createForm = <T extends object = any>(options?: IFormProps<T>) => {\n  return new Form(options)\n}\n\nexport {\n  FormPath,\n  createForm,\n  isArrayField,\n  isArrayFieldState,\n  isDataField,\n  isDataFieldState,\n  isField,\n  isFieldState,\n  isForm,\n  isFormState,\n  isGeneralField,\n  isGeneralFieldState,\n  isObjectField,\n  isObjectFieldState,\n  isQuery,\n  isVoidField,\n  isVoidFieldState,\n  getValidateLocaleIOSCode,\n  setValidateLanguage,\n  registerValidateFormats,\n  registerValidateLocale,\n  registerValidateMessageTemplateEngine,\n  registerValidateRules,\n  createEffectHook,\n  createEffectContext,\n  useEffectForm,\n}\n"],"names":["LifeCycleTypes","LifeCycle","index","params","length","item","Formily","Shared","isFn","isStr","payload","type","call","this","ctx","each","handler","notify","_this","listener","Heart","_super","_a","_b","lifecycles","context","outerLifecycles","Map","reduce","buf","concat","isArr","buildLifeCycles","addLifeCycles","id","delete","publish","forEach","lifecycle","clear","Subscribable","isForm","node","isField","isGeneralField","Field","VoidField","isArrayField","isObjectField","isVoidField","isFormState","state","initialize","isFieldState","isArrayFieldState","isDataField","isObjectFieldState","isQuery","query","Query","Graph","form","getGraph","fields","field","identifier","graph","address","setState","FormPath","parse","name","segments","basePath","parent","createField","createArrayField","createObjectField","createVoidField","Reactive","define","setGraph","batch","exports","ReservedProperties","props","caches","requests","disposers","heart","indexes","componentType","componentProps","decoratorType","decoratorProps","ReadOnlyProperties","path","valid","invalid","selfValid","selfInvalid","errors","successes","warnings","validateStatus","SELF_DISPLAY","SELF_PATTERN","MutuallyExclusiveProperties","pattern","editable","readOnly","readPretty","disabled","display","hidden","visible","GlobalState","effectStart","effectEnd","initializing","NumberIndexReg","hasOwnProperty","Object","prototype","target","formType","fieldType","isHTMLInputEvent","event","stopPropagation","getValuesFromEvent","args","map","isValid","value","checked","buildDataPath","currentAddress","slice","prevArray","current","currentPath","isNumberLike","key","locateNode","buildFieldPath","toString","patchFieldStates","patches","destroy","oldAddress","removeValue","dispose","deleteValuesIn","deleteInitialValuesIn","queryFeedbacks","search","feedbacks","filter","feedback","match","queryFeedbackMessages","info","isEmpty","messages","validateToFeedbacks","triggerType","Validator","validate","validator","validateFirst","results","sent","code","pascalCase","spliceArrayState","addrLength","offset","insertCount","deleteCount","indexOf","isArrayChildren","number","Number","startIndex","isAfterNode","newIdentifier","afterStr","preStr","replace","moveIndex","fieldPatches","push","exchangeArrayState","__assign","fromIndex","toIndex","isDown","cleanupArrayChildren","start","numStr","cleanupObjectChildren","keys","includes","initFieldUpdate","scope","bound","updates","ensureIn","callbacks","callback","createChildrenFeedbackFilter","createStateSetter","model","setter","MutuallyExclusiveKey","deserialize","createStateGetter","getter","toJS","serialize","createBatchStateSetter","matchCount_1","isWildMatchPattern","fn","subscribeUpdate","triggerFormInitialValuesChange","change","Array","isArray","object","contains","initialValues","source","update","clone","assign","values","patch","isUnVoidField","targetField","allowAssignDefaultValue","targetValue","isPlainObj","selfModified","patchFormValues","ON_FORM_INITIAL_VALUES_CHANGE","setValidating","validating","clearTimeout","setTimeout","setSubmitting","submitting","submit","setLoading","loading","batchSubmit","onSubmit","__awaiter","getValues","e_2","batchValidate","tasks","validateSelf","Promise","all","batchReset","options","resetSelf","modified","noEmit","end","ON_FIELD_VALIDATE_SUCCESS","ON_FIELD_VALIDATE_FAILED","allTriggerTypes","parseValidatorDescriptions","types","desc","results_1","i","result","typedDefaultValue","visited","inputValue","inputValues","isUndef","forceClear","initialValue","ON_FIELD_RESET","getValidFormValues","isObservable","isValidTarget","isValidSource","isEmptyTarget","isEmptySource","createReactions","toArr","reactions","addEffects","reaction","autorun","createReaction","tracker","scheduler","untracked","initializeStart","initializeEnd","endpoint","output","taker","base","isMatchPattern","addresses","matched","haveRelativePattern","absoluteField","indexField","indexIdentifier","iterator","reducer","initial","take","getIn","get","BaseField","title","description","setComponent","component","setDecorator","data","content","onInit","initialized","ON_FIELD_INIT","onMount","mounted","unmounted","ON_FIELD_MOUNT","onUnmount","ON_FIELD_UNMOUNT","removeEffects","matchAliasGroup","defineProperty","transform","set","decorator","parentDisplay","selfDisplay","parentPattern","selfPattern","designable","dataSource","searched_1","updateFeedback","selfErrors","selfWarnings","selfSuccesses","setValidatorRule","hasRule","validators","some","rule","required","getState","onInput","inputting","ON_FIELD_INPUT_VALUE_CHANGE","onFocus","active","onBlur","locate","makeObservable","observable","ref","shallow","computed","setDisplay","action","setTitle","setDescription","setDataSource","setValue","setPattern","setInitialValue","setFeedback","setSelfErrors","setSelfWarnings","setSelfSuccesses","setValidator","setRequired","setComponentProps","setDecoratorProps","setData","setContent","reset","makeReactive","ON_FIELD_VALUE_CHANGE","ON_FIELD_INITIAL_VALUE_CHANGE","undefined","createEffectHook","Error","createEffectContext","defaultValue","consume","FormEffectContext","useEffectForm","runEffects","provide","effects","ArrayField","pop","splice","apply","__spreadArray","__read","items","shift","unshift","move","makeAutoCleanable","newLength","oldLength","ObjectField","addProperty","setValuesIn","additionalProperties","existValuesIn","newKeys","filterKeys","DEV_TOOLS_HOOK","Form","ON_FORM_GRAPH_CHANGE","isObj","setValues","strategy","merge","setInitialValues","setIn","deleteIn","existIn","setInitialValuesIn","removeLifeCycles","setLifeCycles","unsubscribe","ON_FORM_INIT","ON_FORM_MOUNT","globalThisPolyfill","inject","ON_FORM_UNMOUNT","unmount","setFormState","getFormState","setFieldState","getFieldState","getFormGraph","clearFormGraph","uid","makeValues","setFormGraph","observe","ON_FORM_VALUES_CHANGE","triggerFormValuesChange","createFormEffect","onFormInit","onFormMount","onFormUnmount","onFormValuesChange","onFormInitialValuesChange","onFormInputChange","ON_FORM_INPUT_CHANGE","onFormSubmit","ON_FORM_SUBMIT","onFormReset","ON_FORM_RESET","onFormSubmitStart","ON_FORM_SUBMIT_START","onFormSubmitEnd","ON_FORM_SUBMIT_END","onFormSubmitSuccess","ON_FORM_SUBMIT_SUCCESS","onFormSubmitFailed","ON_FORM_SUBMIT_FAILED","onFormSubmitValidateStart","ON_FORM_SUBMIT_VALIDATE_START","onFormSubmitValidateSuccess","ON_FORM_SUBMIT_VALIDATE_SUCCESS","onFormSubmitValidateFailed","ON_FORM_SUBMIT_VALIDATE_FAILED","onFormSubmitValidateEnd","ON_FORM_SUBMIT_VALIDATE_END","onFormValidateStart","ON_FORM_VALIDATE_START","onFormValidateSuccess","ON_FORM_VALIDATE_SUCCESS","onFormValidateFailed","ON_FORM_VALIDATE_FAILED","onFormValidateEnd","ON_FORM_VALIDATE_END","onFormGraphChange","onFormLoading","ON_FORM_LOADING","createFieldEffect","_onFieldInit","onFieldMount","onFieldUnmount","onFieldValueChange","onFieldInitialValueChange","onFieldInputValueChange","onFieldValidateStart","ON_FIELD_VALIDATE_START","onFieldValidateEnd","ON_FIELD_VALIDATE_END","onFieldValidating","ON_FIELD_VALIDATING","onFieldValidateFailed","onFieldValidateSuccess","onFieldSubmit","ON_FIELD_SUBMIT","onFieldSubmitStart","ON_FIELD_SUBMIT_START","onFieldSubmitEnd","ON_FIELD_SUBMIT_END","onFieldSubmitValidateStart","ON_FIELD_SUBMIT_VALIDATE_START","onFieldSubmitValidateEnd","ON_FIELD_SUBMIT_VALIDATE_END","onFieldSubmitSuccess","ON_FIELD_SUBMIT_SUCCESS","onFieldSubmitFailed","ON_FIELD_SUBMIT_FAILED","onFieldSubmitValidateSuccess","ON_FIELD_SUBMIT_VALIDATE_SUCCESS","onFieldSubmitValidateFailed","ON_FIELD_SUBMIT_VALIDATE_FAILED","onFieldReset","onFieldLoading","ON_FIELD_LOADING","onFieldInit","count","displayName","watches"],"mappings":"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"}