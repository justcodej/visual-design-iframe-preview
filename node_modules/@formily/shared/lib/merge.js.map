{"version":3,"file":"merge.js","sourceRoot":"","sources":["../src/merge.ts"],"names":[],"mappings":"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","sourcesContent":["import { isValid, isEmpty } from './isEmpty'\nimport { isFn, isPlainObj } from './checkers'\n\nfunction defaultIsMergeableObject(value: any) {\n  return isNonNullObject(value) && !isSpecial(value)\n}\n\nfunction isNonNullObject(value: any) {\n  return !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value: any) {\n  if ('$$typeof' in value && '_owner' in value) {\n    return true\n  }\n  if (value['_isAMomentObject']) {\n    return true\n  }\n  if (value['_isJSONSchemaObject']) {\n    return true\n  }\n  if (isFn(value['toJS'])) {\n    return true\n  }\n  if (isFn(value['toJSON'])) {\n    return true\n  }\n  return !isPlainObj(value)\n}\n\nfunction emptyTarget(val: any) {\n  return Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value: any, options: Options) {\n  if (options.clone !== false && options.isMergeableObject(value)) {\n    return deepmerge(emptyTarget(value), value, options)\n  }\n  return value\n}\n\nfunction defaultArrayMerge(target: any, source: any, options: Options) {\n  return target.concat(source).map(function (element) {\n    return cloneUnlessOtherwiseSpecified(element, options)\n  })\n}\n\nfunction getMergeFunction(key: string, options: Options) {\n  if (!options.customMerge) {\n    return deepmerge\n  }\n  const customMerge = options.customMerge(key)\n  return typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target: any): any {\n  return Object.getOwnPropertySymbols\n    ? Object.getOwnPropertySymbols(target).filter(function (symbol) {\n        return target.propertyIsEnumerable(symbol)\n      })\n    : []\n}\n\nfunction getKeys(target: any) {\n  if (!isValid(target)) return []\n  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object: any, property: any) {\n  /* istanbul ignore next */\n  try {\n    return property in object\n  } catch (_) {\n    return false\n  }\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n  return (\n    propertyIsOnObject(target, key) && // Properties are safe to merge if they don't exist in the target yet,\n    !(\n      Object.hasOwnProperty.call(target, key) && // unsafe if they exist up the prototype chain,\n      Object.propertyIsEnumerable.call(target, key)\n    )\n  ) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target: any, source: any, options: Options) {\n  const destination = options.assign ? target || {} : {}\n  if (!options.isMergeableObject(target)) return target\n  if (!options.assign) {\n    getKeys(target).forEach(function (key) {\n      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options)\n    })\n  }\n  getKeys(source).forEach(function (key) {\n    /* istanbul ignore next */\n    if (propertyIsUnsafe(target, key)) {\n      return\n    }\n    if (isEmpty(target[key])) {\n      destination[key] = source[key]\n    } else if (\n      propertyIsOnObject(target, key) &&\n      options.isMergeableObject(source[key])\n    ) {\n      destination[key] = getMergeFunction(key, options)(\n        target[key],\n        source[key],\n        options\n      )\n    } else {\n      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options)\n    }\n  })\n  return destination\n}\n\ninterface Options {\n  arrayMerge?(target: any[], source: any[], options?: Options): any[]\n  clone?: boolean\n  assign?: boolean\n  customMerge?: (\n    key: string,\n    options?: Options\n  ) => ((x: any, y: any) => any) | undefined\n  isMergeableObject?(value: object): boolean\n  cloneUnlessOtherwiseSpecified?: (value: any, options: Options) => any\n}\n\nfunction deepmerge(target: any, source: any, options?: Options) {\n  options = options || {}\n  options.arrayMerge = options.arrayMerge || defaultArrayMerge\n  options.isMergeableObject =\n    options.isMergeableObject || defaultIsMergeableObject\n  // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n  // implementations can use it. The caller may not replace it.\n  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified\n\n  const sourceIsArray = Array.isArray(source)\n  const targetIsArray = Array.isArray(target)\n  const sourceAndTargetTypesMatch = sourceIsArray === targetIsArray\n\n  if (!sourceAndTargetTypesMatch) {\n    return cloneUnlessOtherwiseSpecified(source, options)\n  } else if (sourceIsArray) {\n    return options.arrayMerge(target, source, options)\n  } else {\n    return mergeObject(target, source, options)\n  }\n}\n\nexport const lazyMerge = <T extends object>(target: T, source: T): T => {\n  if (!isValid(source)) return target\n  if (!isValid(target)) return source\n  if (typeof target !== 'object') return source\n  if (typeof source !== 'object') return target\n  return new Proxy(\n    {},\n    {\n      get(_, key) {\n        if (key in source) return source[key]\n        return target[key]\n      },\n      ownKeys() {\n        const keys = Object.keys(target)\n        for (let key in source) {\n          if (!(key in target)) {\n            keys.push(key)\n          }\n        }\n        return keys\n      },\n      getOwnPropertyDescriptor() {\n        return {\n          enumerable: true,\n          configurable: true,\n          writable: false,\n        }\n      },\n      has(_, key: string) {\n        if (key in source || key in target) return true\n        return false\n      },\n    }\n  ) as any\n}\n\nexport const merge = deepmerge\n"]}