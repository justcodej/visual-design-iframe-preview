'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _always2 = require('ramda/src/always');

var _always3 = _interopRequireDefault(_always2);

var _equals2 = require('ramda/src/equals');

var _equals3 = _interopRequireDefault(_equals2);

var _ifElse2 = require('ramda/src/ifElse');

var _ifElse3 = _interopRequireDefault(_ifElse2);

var _merge2 = require('ramda/src/merge');

var _merge3 = _interopRequireDefault(_merge2);

var _clone2 = require('ramda/src/clone');

var _clone3 = _interopRequireDefault(_clone2);

var _test2 = require('ramda/src/test');

var _test3 = _interopRequireDefault(_test2);

var _isEmpty2 = require('ramda/src/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _isNil2 = require('ramda/src/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _or2 = require('ramda/src/or');

var _or3 = _interopRequireDefault(_or2);

var _2 = require('ramda/src/__');

var _3 = _interopRequireDefault(_2);

var _compose2 = require('ramda/src/compose');

var _compose3 = _interopRequireDefault(_compose2);

var _getStore = require('./get-store');

var _getStore2 = _interopRequireDefault(_getStore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var sid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _getStore2.default)('customerUserId', 'session');
  return (0, _compose3.default)(mergeHeader((0, _or3.default)((0, _isNil3.default)(sid), (0, _isEmpty3.default)(sid)), { sid: 'no-sid' }, { sid: sid }, _3.default), mergeHeader((0, _test3.default)(/^(192.168|127.0|localhost)/, location.host), { appCode: 'blm' }, {}, _3.default))(headers);
};

var mergeHeader = function mergeHeader(condition) {
  var tr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var headers = arguments[3];
  return (0, _compose3.default)((0, _merge3.default)(headers, _3.default), _clone3.default)((0, _ifElse3.default)((0, _equals3.default)(true), (0, _always3.default)(tr), (0, _always3.default)(fr))(condition));
};