import { assert } from 'chai'

import moment from '../src/moment'
import log from '../lib/log'
import addInterval from '../lib/add-interval'
import week from '../lib/week'
import timeDuration from '../lib/time-duration'
import mergeState from '../lib/merge-state'
import parseQuery from '../lib/parse-query'

describe(' test', () => {

  describe('格式化日期', () => {
    it('should return a string', () => {
      // const str = 1487136727315//new Date() //'2017-02-14'
      const r   = (`${ moment('YYYY-MM-DD')() }${ ' 20:30' }`) 
      // moment('HH:mm')(`${ moment('YYYY-MM-DD')() }${ '20:30' }`)

      log('result', r)
      assert.equal('string', typeof r)
    })
  })

  describe('添加一天', () => {
    it('should return a string', () => {
      const str = 1487136727315//new Date() //'2017-02-14'
      const r   = moment('YYYY-MM-DD HH:mm:ss')
                  (addInterval(1, 'd')(moment('YYYY-MM-DD HH:mm:ss')(str)))
      log('result', r)
      assert.equal('string', typeof r)
    })
  })
  describe('添加一小时', () => {
    it('should return a string', () => {
      const str = 1487136727315//new Date() //'2017-02-14'

      const r   = moment('YYYY-MM-DD HH:mm:ss')
                  (addInterval(1, 'h')(moment('YYYY-MM-DD HH:mm:ss')(str)))
      log('result', r)
      assert.equal('string', typeof r)
    })
  })
  describe('添加一分钟', () => {
    it('should return a string', () => {
      const str = 1487136727315//new Date() //'2017-02-14'

      const r   = moment('YYYY-MM-DD HH:mm:ss')
                  (addInterval(1, 'm')(moment('YYYY-MM-DD HH:mm:ss')(str)))
      log('result', r)
      assert.equal('string', typeof r)
    })
  })
  describe('添加一秒钟', () => {
    it('should return a string', () => {
      const str = 1487136727315//new Date() //'2017-02-14'

      const r   = moment('YYYY-MM-DD HH:mm:ss')
                  (addInterval(2, 's' ,moment('YYYY-MM-DD HH:mm:ss')(str)))
      log('result1234', r)
      assert.equal('string', typeof r)
    })
  })

  describe('获取星期', () => {
    it('should return a string', () => {
      const str = 1487136727315//new Date() //'2017-02-14'
      // console.log(moment('day')(str))
      const r   = week()(moment('day')(str))

      log('result', r)
      assert.equal('string', typeof r)
    })
  })

  describe('获取时间间隔', () => {
    it('should return a string', () => {
      const str1 = '2017-02-14 20:00:00'
      const str2 = '2017-02-15 0:20:30'
      // console.log(moment('day')(str))
      const stamp = moment('x')
      const r   = timeDuration(stamp(str1), stamp(str2))

      log('result', r)
      assert.equal('object', typeof r)
    })
  })
  describe('复制状态', () => {
    it('should return a boolean', () => {
      const state = {}
      const action = {
        type: 'TEST',
        test: { a: 1 }
      }
      const r = mergeState(state, action)
      log('result', r)
      assert.equal(false, r === action)
    })
  })

  describe.only('解析url参数', () => {
    it('should be success', () => {
      const url = 'https://dev-icbcmb.otosaas.com/waimai/?areaName=%E5%8C%97%E4%BA%AC&xml=5792B9CAA0EB8790A3C06311B93CE007452718A06FAD88E1345E4F97706793908999C7EC1454954E8AEE0EC27F1EA16D9EB9156287759FC158980507600110E86138DFD7988F0FEEFD1D896B660326FB0968E7657AA4808BF528E16A30704C15F1E9D0A92FBE35DAF4275D90C306631E9EB2CA9C8EB77DB660FD71822F6B27D56C170919C9FF01DD345048456F2FBA40&key=WsPmHOdTKLHry/JB7D8jEXRMoUJ/3xLkvERC0a8+BQDGp144XI3tzvNO7Gqa6QnFFtWQmE++CYaMiZz3HAz4qTB+6Syg1Y3POiJ3Y738CI0F0VHcIKiIW1ZUDkVqpdX68DwjE/FJgqVlj1MTQjXDCUr0cJEoi4woLsH4BwaV4Go='
      const params = parseQuery(url)
      log(params)
    })
  })

})
