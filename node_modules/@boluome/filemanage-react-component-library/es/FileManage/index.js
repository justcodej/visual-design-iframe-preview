function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React, { Component, createContext } from 'react';
import Modal from "./Modal";
import { StyledFileManage } from "./styled";
import { IConfontGlobalStyled, CSSTransitionGlobalStyle, ResetGlobalStyle } from "./global.styled";
import defalutSettings from "./default-settings";
import request from "./utils/request";
import { KEY_NAMES } from "../consts";
import { calcURLPath } from "./utils";
var defalutFileManageContext = {
  settings: defalutSettings,
  currentSelectedList: [],
  dataSource: [],
  onChangeState: function onChangeState() {},
  onNextPage: function onNextPage() {},
  onResetFetch: function onResetFetch() {},
  onSearch: function onSearch() {},
  onClose: function onClose() {},
  headers: {
    token: ''
  },
  save: '',
  upload: '',
  update: '',
  query: '',
  searchValue: '',
  onFetchFiles: function onFetchFiles() {},
  activeIndex: null,
  markingIndex: null,
  beforeUpload: function beforeUpload() {
    return true;
  },
  multiple: false,
  menuVisible: false,
  showDraggerUpload: false
};
export var FileManageContext = /*#__PURE__*/createContext(defalutFileManageContext);

var KpFileManage = /*#__PURE__*/function (_Component) {
  _inherits(KpFileManage, _Component);

  var _super = _createSuper(KpFileManage);

  function KpFileManage(props) {
    var _this;

    _classCallCheck(this, KpFileManage);

    _this = _super.call(this, props);

    _this.handleResetFectch = function () {
      // 重置分页数据并且搜索
      _this.setState({
        page: 1,
        noMore: false,
        totalCount: 0,
        activeIndex: null
      }, _this.fetchFiles);
    };

    _this.fetchFiles = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(isNextPage) {
        var _this$props, query, headers, _this$state, page, pageSize, dataSource, noMore, searchValue, breadcrumb, _yield$request$post, _yield$request$post$l, list, _yield$request$post$t, totalCount;

        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _this$props = _this.props, query = _this$props.query, headers = _this$props.headers;
                _this$state = _this.state, page = _this$state.page, pageSize = _this$state.pageSize, dataSource = _this$state.dataSource, noMore = _this$state.noMore, searchValue = _this$state.searchValue;

                if (!noMore) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return");

              case 5:
                breadcrumb = JSON.parse(window.localStorage.getItem('breadcrumb') || '');
                _context.next = 8;
                return request.post(query, {
                  headers: headers,
                  data: {
                    page: page,
                    pageSize: pageSize,
                    name: searchValue,
                    parentId: breadcrumb[breadcrumb.length - 1] || 0
                  }
                });

              case 8:
                _yield$request$post = _context.sent;
                _yield$request$post$l = _yield$request$post.list;
                list = _yield$request$post$l === void 0 ? [] : _yield$request$post$l;
                _yield$request$post$t = _yield$request$post.totalCount;
                totalCount = _yield$request$post$t === void 0 ? 0 : _yield$request$post$t;

                if (isNextPage) {
                  _this.setState({
                    dataSource: [].concat(_toConsumableArray(dataSource), _toConsumableArray(list)),
                    totalCount: totalCount
                  });
                } else {
                  _this.setState({
                    dataSource: list,
                    totalCount: totalCount
                  });
                }

                _context.next = 19;
                break;

              case 16:
                _context.prev = 16;
                _context.t0 = _context["catch"](0);
                console.error(_context.t0);

              case 19:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 16]]);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }();

    _this.onSearch = function () {
      _this.setState({
        noMore: false,
        page: 1,
        activeIndex: null
      }, _this.fetchFiles);
    };

    _this.onNextPage = function () {
      var _this$state2 = _this.state,
          page = _this$state2.page,
          pageSize = _this$state2.pageSize,
          totalCount = _this$state2.totalCount;

      if (page * pageSize >= totalCount) {
        _this.setState({
          noMore: true
        });

        return;
      }

      _this.setState({
        page: page + 1
      }, function () {
        _this.fetchFiles(true);
      });
    };

    _this.handleChangeState = function (state) {
      _this.setState(_objectSpread(_objectSpread({}, _this.state), state));
    };

    _this.handleClickFileItem = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(index) {
        var isVisible, _this$props$selectedL, selectedList, formatSelectedList, _calcURLPath, breadcrumb, selected, dataSource, newActiveIndex;

        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                isVisible = _this.state.isVisible;
                _this$props$selectedL = _this.props.selectedList, selectedList = _this$props$selectedL === void 0 ? [] : _this$props$selectedL;
                document.body.style.overflowY = !isVisible ? 'hidden' : 'auto'; // 新增时：

                if (!(typeof index === 'undefined')) {
                  _context2.next = 10;
                  break;
                }

                formatSelectedList = selectedList.map(function (item) {
                  return Object.keys(item).length > 1 ? item : calcURLPath(item.url).selected;
                });
                window.localStorage.setItem('breadcrumb', JSON.stringify([0]));
                _context2.next = 8;
                return _this.fetchFiles();

              case 8:
                _this.setState({
                  isVisible: true,
                  currentSelectedList: formatSelectedList
                });

                return _context2.abrupt("return");

              case 10:
                // 编辑时：设置当前文件所在的目录结构
                _calcURLPath = calcURLPath(selectedList[index].url), breadcrumb = _calcURLPath.breadcrumb, selected = _calcURLPath.selected;
                window.localStorage.setItem('breadcrumb', JSON.stringify(breadcrumb));
                _context2.next = 14;
                return _this.fetchFiles();

              case 14:
                // 编辑时：找到当前移动的文件所在文件列表的下标，预览时显示该文件信息
                dataSource = _this.state.dataSource;
                newActiveIndex = dataSource.findIndex(function (item) {
                  return item.url === selected.url;
                });

                _this.setState({
                  isVisible: true,
                  markingIndex: index,
                  activeIndex: newActiveIndex > -1 ? newActiveIndex : null,
                  currentSelectedList: [selected]
                });

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }();

    _this.onKeyDown = function (e) {
      var settings = _this.props.settings;
      if (e.key !== KEY_NAMES.ESCAPE) return;
      if (settings === null || settings === void 0 ? void 0 : settings.keyboard) return _this.setState({
        isVisible: false
      });
      if (defalutSettings.keyboard) return _this.setState({
        isVisible: false
      });
    };

    _this.handleCloseModal = function () {
      var _this$props2 = _this.props,
          onChange = _this$props2.onChange,
          _this$props2$selected = _this$props2.selectedList,
          selectedList = _this$props2$selected === void 0 ? [] : _this$props2$selected;
      var _this$state3 = _this.state,
          currentSelectedList = _this$state3.currentSelectedList,
          markingIndex = _this$state3.markingIndex;

      _this.setState({
        isVisible: false,
        page: 1,
        markingIndex: null,
        activeIndex: null,
        noMore: false,
        searchValue: '',
        totalCount: 0
      });

      var resultSelectedList = currentSelectedList;

      if (markingIndex !== null) {
        resultSelectedList = selectedList.map(function (item) {
          return calcURLPath(item.url).selected;
        });

        if (currentSelectedList.length > 0) {
          resultSelectedList.splice(markingIndex, 1, currentSelectedList[0]);
        } else {
          resultSelectedList.splice(markingIndex, 1);
        }
      }

      onChange && onChange(resultSelectedList);
    };

    var _props$visible = props.visible,
        visible = _props$visible === void 0 ? false : _props$visible;
    _this.state = {
      isVisible: visible,
      dataSource: [],
      page: 1,
      pageSize: 40,
      totalCount: 0,
      noMore: false,
      markingIndex: null,
      currentSelectedList: [],
      activeIndex: null,
      searchValue: '',
      loading: false,
      menuVisible: false,
      showDraggerUpload: false
    };
    return _this;
  }

  _createClass(KpFileManage, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener(KEY_NAMES.KEY_DOWN, this.onKeyDown);

      if (window.localStorage.getItem('breadcrumb') === null) {
        window.localStorage.setItem('breadcrumb', JSON.stringify([0]));
      }

      this.fetchFiles();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener(KEY_NAMES.KEY_DOWN, this.onKeyDown);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var isVisible = this.state.isVisible;
      var _this$props3 = this.props,
          title = _this$props3.title,
          settings = _this$props3.settings,
          _this$props3$selected = _this$props3.selectedList,
          selectedList = _this$props3$selected === void 0 ? [] : _this$props3$selected,
          _this$props3$multiple = _this$props3.multiple,
          multiple = _this$props3$multiple === void 0 ? false : _this$props3$multiple;
      return /*#__PURE__*/React.createElement(StyledFileManage, null, /*#__PURE__*/React.createElement(ResetGlobalStyle, null), /*#__PURE__*/React.createElement(IConfontGlobalStyled, null), /*#__PURE__*/React.createElement(CSSTransitionGlobalStyle, null), /*#__PURE__*/React.createElement("div", {
        className: "kp file-list"
      }, selectedList && selectedList.map(function (item, index) {
        return /*#__PURE__*/React.createElement("div", {
          className: "file-list-item",
          key: item.url,
          onClick: function onClick() {
            return _this2.handleClickFileItem(index);
          }
        }, /*#__PURE__*/React.createElement("img", {
          src: item.url,
          alt: ""
        }));
      }), (!multiple && selectedList.length < 1 || multiple) && /*#__PURE__*/React.createElement("div", {
        className: "file-list-item",
        onClick: function onClick() {
          return _this2.handleClickFileItem();
        }
      }, /*#__PURE__*/React.createElement("i", {
        className: "iconfont icon-jiahao"
      }))), /*#__PURE__*/React.createElement(FileManageContext.Provider, {
        value: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, defalutFileManageContext), {}, {
          onChangeState: this.handleChangeState,
          onClose: this.handleCloseModal,
          onNextPage: this.onNextPage,
          onResetFetch: this.handleResetFectch,
          onFetchFiles: this.fetchFiles,
          onSearch: this.onSearch
        }, this.state), this.props), {}, {
          settings: _objectSpread(_objectSpread({}, defalutSettings), settings)
        })
      }, /*#__PURE__*/React.createElement(Modal, {
        visible: isVisible,
        title: title
      })));
    }
  }]);

  return KpFileManage;
}(Component);

KpFileManage.contextType = FileManageContext;
KpFileManage.defaultProps = {
  visible: false,
  title: '文件资源库',
  settings: defalutSettings,
  selectedList: [],
  headers: {
    token: ''
  },
  file: '',
  upload: '',
  save: '',
  query: '',
  update: '',
  multiple: false
};
export default KpFileManage;