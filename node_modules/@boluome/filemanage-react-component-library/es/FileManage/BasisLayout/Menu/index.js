function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useContext, useEffect, useRef, useState } from 'react';
import { StyledMenu } from "./styled";
import classNames from 'classnames';
import { FileManageContext } from "../..";

var Menu = function Menu(_ref) {
  var mouseX = _ref.mouseX,
      mouseY = _ref.mouseY,
      menuList = _ref.menuList,
      onSelected = _ref.onSelected,
      onRemoveTo = _ref.onRemoveTo;

  var _useContext = useContext(FileManageContext),
      _useContext$settings$ = _useContext.settings.sidebar.width,
      width = _useContext$settings$ === void 0 ? 0 : _useContext$settings$;

  var menuRef = useRef(null);

  var _useState = useState({
    left: 0,
    top: 0
  }),
      _useState2 = _slicedToArray(_useState, 2),
      menuPosition = _useState2[0],
      setMenuPosition = _useState2[1];

  var _useState3 = useState({
    maxRight: false,
    maxBottom: false
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      maxPosition = _useState4[0],
      setMaxPosition = _useState4[1];
  /**
   * @containerLeft 弹框包裹距离浏览器窗口的左边距离
   * @containerTop 弹框包裹距离浏览器窗口的上边距离
   * @fileContentWith 弹框包裹宽度
   * @fileContentHeight 弹框包裹高度
   * @menuOffsetWidth 右键菜单的宽度
   * @menuOffsetHeight 右键菜单的高度
   * @left 鼠标相对于文件列表包裹所在的x
   * @top 鼠标相对于文件列表包裹所在的y
   * @maxRight 子菜单右侧距离浏览器右侧距离小于菜单宽度吗，用于子菜单定位left/right，考虑到是子菜单，需要*2
   * @maxBottom 子菜单底部距离浏览器底部距离小于菜单高度，用于子菜单定位top/bottom，考虑到是子菜单，需要*2
   */


  useEffect(function () {
    var _menuRef$current, _menuRef$current2;

    var container = document.querySelector('.modal-container');
    var fileContent = document.querySelector('.file-content');
    var containerLeft = container.offsetLeft;
    var containerTop = container.offsetTop;
    var left = mouseX - width - containerLeft;
    var top = mouseY - containerTop - 126; // 改变搜索区和Header元素时微调一下这里

    var fileContentWith = fileContent.offsetWidth;
    var fileContentHeight = fileContent.offsetHeight;
    var menuOffsetWidth = ((_menuRef$current = menuRef.current) === null || _menuRef$current === void 0 ? void 0 : _menuRef$current.offsetWidth) || 0;
    var menuOffsetHeight = ((_menuRef$current2 = menuRef.current) === null || _menuRef$current2 === void 0 ? void 0 : _menuRef$current2.offsetHeight) || 0;
    var maxRight = fileContentWith - left < menuOffsetWidth * 2;
    var maxBottom = fileContentHeight - top < menuOffsetHeight * 2;

    if (fileContentWith - left < menuOffsetWidth) {
      left = fileContentWith - menuOffsetWidth;
    }

    if (fileContentHeight - top < menuOffsetHeight) {
      top = fileContentHeight - menuOffsetHeight;
    }

    setMenuPosition({
      left: left,
      top: top
    });
    setMaxPosition({
      maxRight: maxRight,
      maxBottom: maxBottom
    });
  }, [mouseX, mouseY]);
  return /*#__PURE__*/React.createElement(StyledMenu, {
    style: menuPosition,
    ref: menuRef
  }, menuList.map(function (item) {
    return /*#__PURE__*/React.createElement("div", {
      className: "menu-item",
      key: item.key,
      onClick: function onClick() {
        return onSelected && onSelected(item);
      }
    }, item.key === 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("i", {
      className: classNames('iconfont', "icon-".concat(item.icon))
    }), /*#__PURE__*/React.createElement("div", {
      className: "menu-item-name"
    }, item.label)) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("i", {
      className: classNames('iconfont', "icon-".concat(item.icon))
    }), /*#__PURE__*/React.createElement("div", {
      className: "menu-item-name"
    }, item.label)), item.children && /*#__PURE__*/React.createElement("ul", {
      className: classNames('sub-menus', {
        'max-right': maxPosition.maxRight
      }, {
        'max-bottom': maxPosition.maxBottom
      })
    }, item.children.map(function (item) {
      return /*#__PURE__*/React.createElement("li", {
        className: "submenu-item",
        key: item.id,
        onClick: function onClick() {
          return onRemoveTo && onRemoveTo(item);
        }
      }, /*#__PURE__*/React.createElement("div", {
        className: "menu-item-name"
      }, item.name));
    })));
  }));
};

export default Menu;