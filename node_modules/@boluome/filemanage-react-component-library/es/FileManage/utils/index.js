function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

export var getQueryObj = function getQueryObj(urlStr) {
  var theRequest = new Object();

  if (typeof urlStr == 'undefined') {
    // 获取url中"?"符后的字符串
    return theRequest;
  } else {
    var url = '?' + urlStr.split('?')[1];
  }

  if (url.indexOf('?') != -1) {
    var str = url.substr(1);
    if (str === 'undefined') return theRequest;
    var strs = str.split('&');

    for (var i = 0; i < strs.length; i++) {
      theRequest[strs[i].split('=')[0]] = decodeURI(strs[i].split('=')[1]);
    }
  }

  return theRequest;
};
export var calcURLPath = function calcURLPath(path) {
  var _query$path, _path$match, _path$match2;

  var query = getQueryObj(path);
  var ids = (_query$path = query.path) === null || _query$path === void 0 ? void 0 : _query$path.split(',').map(function (item) {
    return Number(item);
  });
  var breadcrumb = ids ? [0].concat(_toConsumableArray(ids.slice(1, ids.length - 1))) : [0];
  var obj = {
    url: path || '',
    name: (path === null || path === void 0 ? void 0 : (_path$match = path.match(/[\u4e00-\u9fa5a\aA-zZ\d]+\.(jpg|png|jpeg|gif)/g)) === null || _path$match === void 0 ? void 0 : _path$match.join()) || '',
    suffix: (path === null || path === void 0 ? void 0 : (_path$match2 = path.match(/(jpg|png|jpeg|gif)/g)) === null || _path$match2 === void 0 ? void 0 : _path$match2.join()) || '',
    type: 2
  };
  var selected = ids ? _objectSpread(_objectSpread({}, obj), {}, {
    id: ids[ids.length - 1],
    parentId: breadcrumb[breadcrumb.length - 1]
  }) : _objectSpread(_objectSpread({}, obj), {}, {
    parentId: 0
  });
  return {
    selected: selected,
    breadcrumb: breadcrumb
  };
};