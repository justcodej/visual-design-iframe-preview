import React, { Component } from 'react';
import { KpFileManageProps, FilemanageContextProps, IDataSourceItem } from '@/FileManage/types/file-manage';
export declare const FileManageContext: React.Context<FilemanageContextProps>;
export interface KpFileManageContext {
    isVisible: boolean;
    dataSource: IDataSourceItem[];
    page: number;
    pageSize: number;
    totalCount: number;
    noMore: boolean;
    currentSelectedList: IDataSourceItem[];
    activeIndex: number | null;
    markingIndex: number | null;
    searchValue: string;
    loading: boolean;
    menuVisible: boolean;
    showDraggerUpload: boolean;
}
declare class KpFileManage extends Component<KpFileManageProps, KpFileManageContext> {
    constructor(props: KpFileManageProps | Readonly<KpFileManageProps>);
    static contextType?: React.Context<any> | undefined;
    static defaultProps: {
        visible: boolean;
        title: string;
        settings: {
            maskClosable: boolean;
            defalutActive: number;
            timeout: number;
            sidebar: {
                width: number;
            };
            themeColor: string;
            keyboard: boolean;
        };
        selectedList: never[];
        headers: {
            token: string;
        };
        file: string;
        upload: string;
        save: string;
        query: string;
        update: string;
        multiple: boolean;
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    handleResetFectch: () => void;
    fetchFiles: (isNextPage?: boolean) => Promise<void>;
    onSearch: () => void;
    onNextPage: () => void;
    handleChangeState: (state: Partial<KpFileManageContext>) => void;
    handleClickFileItem: (index?: number) => Promise<void>;
    onKeyDown: (e: any) => void;
    handleCloseModal: () => void;
    render(): JSX.Element;
}
export default KpFileManage;
