var _excluded = ["timeout", "maskClosable"],
    _excluded2 = ["settings", "onClose"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useContext } from 'react';
import ReactDOM from 'react-dom';
import { CSSTransition } from 'react-transition-group';
import Basislayout from "../BasisLayout";
import { ModalWarp, ModalMask, ModalContainer, ModalHeader } from "./styled";
import { FileManageContext } from "./..";
import { KpIcon } from "../../componnets";

var Modal = function Modal(_ref) {
  var visible = _ref.visible,
      title = _ref.title,
      width = _ref.width,
      height = _ref.height;

  var _useContext = useContext(FileManageContext),
      _useContext$settings = _useContext.settings,
      timeout = _useContext$settings.timeout,
      maskClosable = _useContext$settings.maskClosable,
      restSettings = _objectWithoutProperties(_useContext$settings, _excluded),
      onClose = _useContext.onClose,
      rest = _objectWithoutProperties(_useContext, _excluded2);

  var handleClose = function handleClose() {
    if (!maskClosable) return;
    onClose();
  };

  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(FileManageContext.Provider, {
    value: _objectSpread({
      settings: _objectSpread({
        timeout: timeout,
        maskClosable: maskClosable
      }, restSettings),
      onClose: onClose
    }, rest)
  }, /*#__PURE__*/React.createElement(ModalWarp, null, /*#__PURE__*/React.createElement(CSSTransition, {
    in: visible,
    timeout: timeout,
    unmountOnExit: true,
    classNames: "modal-mask"
  }, /*#__PURE__*/React.createElement(ModalMask, {
    onClick: handleClose
  })), /*#__PURE__*/React.createElement(CSSTransition, {
    in: visible,
    timeout: timeout,
    unmountOnExit: true,
    classNames: "kp-modal"
  }, /*#__PURE__*/React.createElement(ModalContainer, {
    style: {
      width: width,
      height: height
    },
    className: "modal-container"
  }, /*#__PURE__*/React.createElement(ModalHeader, null, /*#__PURE__*/React.createElement("div", {
    className: "title"
  }, title), /*#__PURE__*/React.createElement(KpIcon, {
    type: "icon-cuohao",
    onClick: onClose
  })), /*#__PURE__*/React.createElement(Basislayout, null))))), document.body);
};

Modal.defaultProps = {
  onClose: function onClose() {}
};
export default Modal;