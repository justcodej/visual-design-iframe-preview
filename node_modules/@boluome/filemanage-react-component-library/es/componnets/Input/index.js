var _excluded = ["width", "children", "size", "onPressEnter", "onBlur", "onChange", "onClick"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { StyledInputWrap } from "./styled";
import { KEY_NAMES } from "../../consts";

var KpInput = function KpInput(_ref) {
  var width = _ref.width,
      children = _ref.children,
      size = _ref.size,
      onPressEnter = _ref.onPressEnter,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      onClick = _ref.onClick,
      rest = _objectWithoutProperties(_ref, _excluded);

  var handleKeyDown = function handleKeyDown(e) {
    if (e.keyCode === 13) {
      onPressEnter && onPressEnter();
    }

    if (e.code === KEY_NAMES.ESCAPE) {
      onBlur && onBlur();
      e.stopPropagation();
    }
  };

  var handleInputChange = function handleInputChange(e) {
    onChange && onChange(e.target.value);
  };

  return /*#__PURE__*/React.createElement(StyledInputWrap, {
    style: {
      width: width
    },
    size: size
  }, /*#__PURE__*/React.createElement("input", _objectSpread({
    onClick: onClick,
    type: "text",
    onKeyDown: handleKeyDown,
    onBlur: onBlur,
    onChange: handleInputChange
  }, rest)), children);
};

export default KpInput;