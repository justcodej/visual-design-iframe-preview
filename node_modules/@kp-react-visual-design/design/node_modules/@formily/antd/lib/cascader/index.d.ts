import React from 'react';
export declare const Cascader: React.ForwardRefExoticComponent<(Pick<Partial<Omit<import("rc-cascader").SingleCascaderProps<import("rc-cascader").DefaultOptionType>, "options" | "checkable"> & {
    multiple?: false;
} & {
    multiple?: boolean;
    size?: import("antd/lib/button").ButtonSize;
    bordered?: boolean;
    placement?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight";
    suffixIcon?: React.ReactNode;
    options?: (import("rc-cascader").DefaultOptionType | import("rc-cascader").BaseOptionType)[];
    status?: "" | "error" | "warning";
} & {
    children?: React.ReactNode;
} & {
    ref?: React.Ref<import("antd/lib/cascader").CascaderRef>;
}>, "value" | "children" | "style" | "status" | "onClick" | "defaultValue" | "className" | "id" | "placeholder" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "onFocus" | "onBlur" | "onChange" | "onKeyDown" | "onKeyUp" | "onMouseDown" | "onMouseEnter" | "onMouseLeave" | "autoFocus" | "disabled" | "size" | "loading" | "prefixCls" | "multiple" | "open" | "inputIcon" | "getInputElement" | "getRawInputElement" | "placement" | "searchValue" | "onSearch" | "showSearch" | "tagRender" | "direction" | "notFoundContent" | "onClear" | "choiceTransitionName" | "defaultOpen" | "onDropdownVisibleChange" | "maxTagTextLength" | "maxTagCount" | "maxTagPlaceholder" | "allowClear" | "showArrow" | "clearIcon" | "removeIcon" | "animation" | "transitionName" | "dropdownStyle" | "dropdownClassName" | "dropdownMatchSelectWidth" | "dropdownRender" | "dropdownAlign" | "getPopupContainer" | "showAction" | "onPopupScroll" | "onInputKeyDown" | "fieldNames" | "options" | "suffixIcon" | "bordered" | "expandIcon" | "dropdownPrefixCls" | "showCheckedStrategy" | "loadData" | "changeOnSelect" | "displayRender" | "expandTrigger" | "popupVisible" | "popupClassName" | "dropdownMenuColumnStyle" | "popupPlacement" | "onPopupVisibleChange" | "loadingIcon"> | Pick<Partial<Omit<import("rc-cascader").MultipleCascaderProps<import("rc-cascader").DefaultOptionType>, "options" | "checkable"> & {
    multiple: true;
} & {
    multiple?: boolean;
    size?: import("antd/lib/button").ButtonSize;
    bordered?: boolean;
    placement?: "bottomLeft" | "bottomRight" | "topLeft" | "topRight";
    suffixIcon?: React.ReactNode;
    options?: (import("rc-cascader").DefaultOptionType | import("rc-cascader").BaseOptionType)[];
    status?: "" | "error" | "warning";
} & {
    children?: React.ReactNode;
} & {
    ref?: React.Ref<import("antd/lib/cascader").CascaderRef>;
}>, "value" | "children" | "style" | "status" | "onClick" | "defaultValue" | "className" | "id" | "placeholder" | "tabIndex" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "onFocus" | "onBlur" | "onChange" | "onKeyDown" | "onKeyUp" | "onMouseDown" | "onMouseEnter" | "onMouseLeave" | "autoFocus" | "disabled" | "size" | "loading" | "prefixCls" | "multiple" | "open" | "inputIcon" | "getInputElement" | "getRawInputElement" | "placement" | "searchValue" | "onSearch" | "showSearch" | "tagRender" | "direction" | "notFoundContent" | "onClear" | "choiceTransitionName" | "defaultOpen" | "onDropdownVisibleChange" | "maxTagTextLength" | "maxTagCount" | "maxTagPlaceholder" | "allowClear" | "showArrow" | "clearIcon" | "removeIcon" | "animation" | "transitionName" | "dropdownStyle" | "dropdownClassName" | "dropdownMatchSelectWidth" | "dropdownRender" | "dropdownAlign" | "getPopupContainer" | "showAction" | "onPopupScroll" | "onInputKeyDown" | "fieldNames" | "options" | "suffixIcon" | "bordered" | "expandIcon" | "dropdownPrefixCls" | "showCheckedStrategy" | "loadData" | "changeOnSelect" | "displayRender" | "expandTrigger" | "popupVisible" | "popupClassName" | "dropdownMenuColumnStyle" | "popupPlacement" | "onPopupVisibleChange" | "loadingIcon">) & React.RefAttributes<unknown>>;
export default Cascader;
