{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/array-cards/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,gDAAyB;AACzB,6BAAkC;AAGlC,wCAKuB;AACvB,0DAA4B;AAE5B,+CAA8C;AAC9C,4CAA0D;AAK1D,IAAM,mBAAmB,GAAG,UAAC,MAAe;;IAC1C,OAAO,CAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,CAAC,UAAU,CAAC,IAAG,CAAC,CAAC,CAAA;AACxD,CAAC,CAAA;AAED,IAAM,gBAAgB,GAAG,UAAC,MAAe;;IACvC,OAAO,CAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,CAAC,OAAO,CAAC,IAAG,CAAC,CAAC,CAAA;AACrD,CAAC,CAAA;AAED,IAAM,iBAAiB,GAAG,UAAC,MAAe;;IACxC,OAAO,CAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,CAAC,QAAQ,CAAC,IAAG,CAAC,CAAC,CAAA;AACtD,CAAC,CAAA;AAED,IAAM,eAAe,GAAG,UAAC,MAAe;;IACtC,OAAO,CAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,CAAC,MAAM,CAAC,IAAG,CAAC,CAAC,CAAA;AACpD,CAAC,CAAA;AAED,IAAM,iBAAiB,GAAG,UAAC,MAAe;;IACxC,OAAO,CAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,CAAC,QAAQ,CAAC,IAAG,CAAC,CAAC,CAAA;AACtD,CAAC,CAAA;AAED,IAAM,mBAAmB,GAAG,UAAC,MAAe;;IAC1C,OAAO,CAAA,MAAA,MAAM,CAAC,aAAa,CAAC,0CAAE,OAAO,CAAC,UAAU,CAAC,IAAG,CAAC,CAAC,CAAA;AACxD,CAAC,CAAA;AAED,IAAM,oBAAoB,GAAG,UAAC,MAAe;IAC3C,OAAO,CACL,mBAAmB,CAAC,MAAM,CAAC;QAC3B,iBAAiB,CAAC,MAAM,CAAC;QACzB,eAAe,CAAC,MAAM,CAAC;QACvB,mBAAmB,CAAC,MAAM,CAAC;QAC3B,iBAAiB,CAAC,MAAM,CAAC,CAC1B,CAAA;AACH,CAAC,CAAA;AAEY,QAAA,UAAU,GAAuB,IAAA,gBAAQ,EAAC,UAAC,KAAK;IAC3D,IAAM,KAAK,GAAG,IAAA,gBAAQ,GAAc,CAAA;IACpC,IAAM,MAAM,GAAG,IAAA,sBAAc,GAAE,CAAA;IAC/B,IAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAA;IAChE,IAAM,SAAS,GAAG,IAAA,0BAAY,EAAC,qBAAqB,EAAE,KAAK,CAAC,CAAA;IAE5D,IAAI,CAAC,MAAM;QAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;IAE3D,IAAM,WAAW,GAAG;QAClB,OAAO,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK;YACjC,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;gBACvC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBACxC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAA;YAChB,IAAM,KAAK,GAAG,CACZ;gBACE,8BAAC,sBAAc,IACb,MAAM,EAAE,KAAK,EACb,IAAI,EAAE,KAAK,EACX,gBAAgB,EAAE,UAAC,MAAM;wBACvB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;4BAAE,OAAO,KAAK,CAAA;wBAC3C,OAAO,IAAI,CAAA;oBACb,CAAC,EACD,oBAAoB,SACpB;gBACD,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CACtB,CACR,CAAA;YACD,IAAM,KAAK,GAAG,CACZ;gBACE,8BAAC,sBAAc,IACb,MAAM,EAAE,KAAK,EACb,IAAI,EAAE,KAAK,EACX,gBAAgB,EAAE,UAAC,MAAM;wBACvB,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC;4BAAE,OAAO,KAAK,CAAA;wBAC/C,OAAO,IAAI,CAAA;oBACb,CAAC,EACD,oBAAoB,SACpB;gBACD,KAAK,CAAC,KAAK,CACP,CACR,CAAA;YACD,IAAM,OAAO,GAAG,CACd,8BAAC,sBAAc,IACb,MAAM,EAAE,KAAK,EACb,IAAI,EAAE,KAAK,EACX,gBAAgB,EAAE,UAAC,MAAM;oBACvB,IAAI,gBAAgB,CAAC,MAAM,CAAC;wBAAE,OAAO,KAAK,CAAA;oBAC1C,IAAI,oBAAoB,CAAC,MAAM,CAAC;wBAAE,OAAO,KAAK,CAAA;oBAC9C,OAAO,IAAI,CAAA;gBACb,CAAC,GACD,CACH,CAAA;YACD,OAAO,CACL,8BAAC,sBAAS,CAAC,IAAI,IACb,GAAG,EAAE,KAAK,EACV,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,sBAAM,OAAA,MAAA,KAAK,CAAC,KAAK,0CAAG,KAAK,CAAC,CAAA,EAAA;gBAElC,8BAAC,WAAI,eACC,KAAK,IACT,QAAQ,EAAE,cAAO,CAAC,EAClB,SAAS,EAAE,IAAA,oBAAG,EAAC,UAAG,SAAS,UAAO,EAAE,KAAK,CAAC,SAAS,CAAC,EACpD,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,KAAK,KAEX,OAAO,CACH,CACQ,CAClB,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC,CAAA;IAED,IAAM,cAAc,GAAG;QACrB,OAAO,MAAM,CAAC,gBAAgB,CAAC,UAAC,QAAQ,EAAE,MAAM,EAAE,GAAG;YACnD,IAAI,mBAAmB,CAAC,MAAM,CAAC,EAAE;gBAC/B,OAAO,8BAAC,sBAAc,IAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,GAAI,CAAA;aACrD;YACD,OAAO,QAAQ,CAAA;QACjB,CAAC,EAAE,IAAI,CAAC,CAAA;IACV,CAAC,CAAA;IAED,IAAM,WAAW,GAAG;QAClB,IAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM;YAAE,OAAM;QAC9B,OAAO,CACL,8BAAC,WAAI,eACC,KAAK,IACT,QAAQ,EAAE,cAAO,CAAC,EAClB,SAAS,EAAE,IAAA,oBAAG,EAAC,UAAG,SAAS,UAAO,EAAE,KAAK,CAAC,SAAS,CAAC,EACpD,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK;YAEjC,8BAAC,YAAK,OAAG,CACJ,CACR,CAAA;IACH,CAAC,CAAA;IAED,OAAO,CACL,8BAAC,sBAAS;QACP,WAAW,EAAE;QACb,WAAW,EAAE;QACb,cAAc,EAAE,CACP,CACb,CAAA;AACH,CAAC,CAAC,CAAA;AAEF,kBAAU,CAAC,WAAW,GAAG,YAAY,CAAA;AAErC,sBAAS,CAAC,KAAK,CAAC,kBAAU,CAAC,CAAA;AAE3B,kBAAe,kBAAU,CAAA","sourcesContent":["import React from 'react'\nimport { Card, Empty } from 'antd'\nimport { CardProps } from 'antd/lib/card'\nimport { ArrayField } from '@formily/core'\nimport {\n  useField,\n  observer,\n  useFieldSchema,\n  RecursionField,\n} from '@formily/react'\nimport cls from 'classnames'\nimport { ISchema } from '@formily/json-schema'\nimport { usePrefixCls } from '../__builtins__'\nimport { ArrayBase, ArrayBaseMixins } from '../array-base'\n\ntype ComposedArrayCards = React.FC<React.PropsWithChildren<CardProps>> &\n  ArrayBaseMixins\n\nconst isAdditionComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Addition') > -1\n}\n\nconst isIndexComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Index') > -1\n}\n\nconst isRemoveComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Remove') > -1\n}\n\nconst isCopyComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('Copy') > -1\n}\n\nconst isMoveUpComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('MoveUp') > -1\n}\n\nconst isMoveDownComponent = (schema: ISchema) => {\n  return schema['x-component']?.indexOf('MoveDown') > -1\n}\n\nconst isOperationComponent = (schema: ISchema) => {\n  return (\n    isAdditionComponent(schema) ||\n    isRemoveComponent(schema) ||\n    isCopyComponent(schema) ||\n    isMoveDownComponent(schema) ||\n    isMoveUpComponent(schema)\n  )\n}\n\nexport const ArrayCards: ComposedArrayCards = observer((props) => {\n  const field = useField<ArrayField>()\n  const schema = useFieldSchema()\n  const dataSource = Array.isArray(field.value) ? field.value : []\n  const prefixCls = usePrefixCls('formily-array-cards', props)\n\n  if (!schema) throw new Error('can not found schema object')\n\n  const renderItems = () => {\n    return dataSource?.map((item, index) => {\n      const items = Array.isArray(schema.items)\n        ? schema.items[index] || schema.items[0]\n        : schema.items\n      const title = (\n        <span>\n          <RecursionField\n            schema={items}\n            name={index}\n            filterProperties={(schema) => {\n              if (!isIndexComponent(schema)) return false\n              return true\n            }}\n            onlyRenderProperties\n          />\n          {props.title || field.title}\n        </span>\n      )\n      const extra = (\n        <span>\n          <RecursionField\n            schema={items}\n            name={index}\n            filterProperties={(schema) => {\n              if (!isOperationComponent(schema)) return false\n              return true\n            }}\n            onlyRenderProperties\n          />\n          {props.extra}\n        </span>\n      )\n      const content = (\n        <RecursionField\n          schema={items}\n          name={index}\n          filterProperties={(schema) => {\n            if (isIndexComponent(schema)) return false\n            if (isOperationComponent(schema)) return false\n            return true\n          }}\n        />\n      )\n      return (\n        <ArrayBase.Item\n          key={index}\n          index={index}\n          record={() => field.value?.[index]}\n        >\n          <Card\n            {...props}\n            onChange={() => {}}\n            className={cls(`${prefixCls}-item`, props.className)}\n            title={title}\n            extra={extra}\n          >\n            {content}\n          </Card>\n        </ArrayBase.Item>\n      )\n    })\n  }\n\n  const renderAddition = () => {\n    return schema.reduceProperties((addition, schema, key) => {\n      if (isAdditionComponent(schema)) {\n        return <RecursionField schema={schema} name={key} />\n      }\n      return addition\n    }, null)\n  }\n\n  const renderEmpty = () => {\n    if (dataSource?.length) return\n    return (\n      <Card\n        {...props}\n        onChange={() => {}}\n        className={cls(`${prefixCls}-item`, props.className)}\n        title={props.title || field.title}\n      >\n        <Empty />\n      </Card>\n    )\n  }\n\n  return (\n    <ArrayBase>\n      {renderEmpty()}\n      {renderItems()}\n      {renderAddition()}\n    </ArrayBase>\n  )\n})\n\nArrayCards.displayName = 'ArrayCards'\n\nArrayBase.mixin(ArrayCards)\n\nexport default ArrayCards\n"]}