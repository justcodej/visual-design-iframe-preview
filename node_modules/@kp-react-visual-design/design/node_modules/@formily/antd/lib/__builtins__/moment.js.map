{"version":3,"file":"moment.js","sourceRoot":"","sources":["../../src/__builtins__/moment.ts"],"names":[],"mappings":";;;;;;AAAA,0CAAsD;AACtD,kDAA2B;AAEpB,IAAM,UAAU,GAAG,UAAC,KAAU,EAAE,MAAe;IACpD,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;QACzB,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,IAAA,gBAAM,EAAC,GAAG,EAAE,MAAM,CAAC,EAAnB,CAAmB,CAAC;QACzC,CAAC,CAAC,KAAK;YACP,CAAC,CAAC,IAAA,gBAAM,EAAC,KAAK,EAAE,MAAM,CAAC;YACvB,CAAC,CAAC,KAAK,CAAA;AACX,CAAC,CAAA;AANY,QAAA,UAAU,cAMtB;AAEM,IAAM,iBAAiB,GAAG,UAC/B,KAAU,EACV,MAAW,EACX,WAAoB;IAEpB,IAAM,UAAU,GAAG,UAAC,IAAS,EAAE,MAAW,EAAE,CAAK;QAAL,kBAAA,EAAA,KAAK;QAC/C,IAAI,CAAC,IAAI;YAAE,OAAO,WAAW,CAAA;QAC7B,IAAI,IAAA,cAAK,EAAC,MAAM,CAAC,EAAE;YACjB,IAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YACzB,IAAI,IAAA,aAAI,EAAC,OAAO,CAAC,EAAE;gBACjB,OAAO,OAAO,CAAC,IAAI,CAAC,CAAA;aACrB;YACD,IAAI,IAAA,gBAAO,EAAC,OAAO,CAAC,EAAE;gBACpB,OAAO,IAAI,CAAA;aACZ;YACD,OAAO,IAAA,gBAAM,EAAC,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;SACpC;aAAM;YACL,IAAI,IAAA,aAAI,EAAC,MAAM,CAAC,EAAE;gBAChB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAA;aACpB;YACD,IAAI,IAAA,gBAAO,EAAC,MAAM,CAAC,EAAE;gBACnB,OAAO,IAAI,CAAA;aACZ;YACD,OAAO,IAAA,gBAAM,EAAC,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;SACnC;IACH,CAAC,CAAA;IACD,IAAI,IAAA,cAAK,EAAC,KAAK,CAAC,EAAE;QAChB,OAAO,KAAK,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK;YAC1B,OAAO,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;QACvC,CAAC,CAAC,CAAA;KACH;SAAM;QACL,OAAO,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,WAAW,CAAA;KAChE;AACH,CAAC,CAAA;AAjCY,QAAA,iBAAiB,qBAiC7B","sourcesContent":["import { isArr, isFn, isEmpty } from '@formily/shared'\nimport moment from 'moment'\n\nexport const momentable = (value: any, format?: string) => {\n  return Array.isArray(value)\n    ? value.map((val) => moment(val, format))\n    : value\n    ? moment(value, format)\n    : value\n}\n\nexport const formatMomentValue = (\n  value: any,\n  format: any,\n  placeholder?: string\n): string | string[] => {\n  const formatDate = (date: any, format: any, i = 0) => {\n    if (!date) return placeholder\n    if (isArr(format)) {\n      const _format = format[i]\n      if (isFn(_format)) {\n        return _format(date)\n      }\n      if (isEmpty(_format)) {\n        return date\n      }\n      return moment(date).format(_format)\n    } else {\n      if (isFn(format)) {\n        return format(date)\n      }\n      if (isEmpty(format)) {\n        return date\n      }\n      return moment(date).format(format)\n    }\n  }\n  if (isArr(value)) {\n    return value.map((val, index) => {\n      return formatDate(val, format, index)\n    })\n  } else {\n    return value ? formatDate(value, format) : value || placeholder\n  }\n}\n"]}