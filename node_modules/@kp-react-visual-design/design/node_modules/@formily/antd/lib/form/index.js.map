{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/form/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAyB;AACzB,sCAKsB;AACtB,wCAKuB;AACvB,8CAA6D;AAC7D,gDAA6C;AAStC,IAAM,IAAI,GAAiD,UAAC,EAOlE;IANC,IAAA,IAAI,UAAA,EACJ,SAAS,eAAA,EACT,YAAY,kBAAA,EACZ,kBAAkB,wBAAA,EAClB,sBAAsB,4BAAA,EACnB,KAAK,cANyD,qFAOlE,CADS;IAER,IAAM,GAAG,GAAG,IAAA,qBAAa,GAAE,CAAA;IAC3B,IAAM,aAAa,GAAG,UAAC,IAA4B,IAAK,OAAA,CACtD,8BAAC,mBAAW,IAAC,SAAS,EAAE,cAAM,OAAA,CAAC,IAAA,aAAM,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAzC,CAAyC;QACrE,8BAAC,0BAAW,CAAC,WAAW,IAAC,KAAK,EAAE,sBAAsB;YACpD,8BAAC,wBAAU,eAAK,KAAK,GAClB,eAAK,CAAC,aAAa,CAClB,SAAS,EACT;gBACE,QAAQ,EAAR,UAAS,CAAkB;;oBACzB,MAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,eAAe,iDAAI,CAAA;oBACtB,MAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,cAAc,iDAAI,CAAA;oBACrB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAA;gBACrD,CAAC;aACF,EACD,KAAK,CAAC,QAAQ,CACf,CACU,CACW,CACd,CACf,EAlBuD,CAkBvD,CAAA;IACD,IAAI,IAAI;QACN,OAAO,8BAAC,oBAAY,IAAC,IAAI,EAAE,IAAI,IAAG,aAAa,CAAC,IAAI,CAAC,CAAgB,CAAA;IACvE,IAAI,CAAC,GAAG;QAAE,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAA;IAClE,OAAO,aAAa,CAAC,GAAG,CAAC,CAAA;AAC3B,CAAC,CAAA;AAhCY,QAAA,IAAI,QAgChB;AAED,YAAI,CAAC,YAAY,GAAG;IAClB,SAAS,EAAE,MAAM;CAClB,CAAA;AAED,kBAAe,YAAI,CAAA","sourcesContent":["import React from 'react'\nimport {\n  Form as FormType,\n  ObjectField,\n  IFormFeedback,\n  isForm,\n} from '@formily/core'\nimport {\n  useParentForm,\n  FormProvider,\n  JSXComponent,\n  RecordScope,\n} from '@formily/react'\nimport { FormLayout, IFormLayoutProps } from '../form-layout'\nimport { PreviewText } from '../preview-text'\nexport interface FormProps extends IFormLayoutProps {\n  form?: FormType\n  component?: JSXComponent\n  onAutoSubmit?: (values: any) => any\n  onAutoSubmitFailed?: (feedbacks: IFormFeedback[]) => void\n  previewTextPlaceholder?: React.ReactNode\n}\n\nexport const Form: React.FC<React.PropsWithChildren<FormProps>> = ({\n  form,\n  component,\n  onAutoSubmit,\n  onAutoSubmitFailed,\n  previewTextPlaceholder,\n  ...props\n}) => {\n  const top = useParentForm()\n  const renderContent = (form: FormType | ObjectField) => (\n    <RecordScope getRecord={() => (isForm(form) ? form.values : form.value)}>\n      <PreviewText.Placeholder value={previewTextPlaceholder}>\n        <FormLayout {...props}>\n          {React.createElement(\n            component,\n            {\n              onSubmit(e: React.FormEvent) {\n                e?.stopPropagation?.()\n                e?.preventDefault?.()\n                form.submit(onAutoSubmit).catch(onAutoSubmitFailed)\n              },\n            },\n            props.children\n          )}\n        </FormLayout>\n      </PreviewText.Placeholder>\n    </RecordScope>\n  )\n  if (form)\n    return <FormProvider form={form}>{renderContent(form)}</FormProvider>\n  if (!top) throw new Error('must pass form instance by createForm')\n  return renderContent(top)\n}\n\nForm.defaultProps = {\n  component: 'form',\n}\n\nexport default Form\n"]}