import React from 'react';
export interface IFormLayoutProps {
    prefixCls?: string;
    className?: string;
    style?: React.CSSProperties;
    colon?: boolean;
    labelAlign?: 'right' | 'left' | ('right' | 'left')[];
    wrapperAlign?: 'right' | 'left' | ('right' | 'left')[];
    labelWrap?: boolean;
    labelWidth?: number;
    wrapperWidth?: number;
    wrapperWrap?: boolean;
    labelCol?: number | number[];
    wrapperCol?: number | number[];
    fullness?: boolean;
    size?: 'small' | 'default' | 'large';
    layout?: 'vertical' | 'horizontal' | 'inline' | ('vertical' | 'horizontal' | 'inline')[];
    direction?: 'rtl' | 'ltr';
    inset?: boolean;
    shallow?: boolean;
    tooltipLayout?: 'icon' | 'text';
    tooltipIcon?: React.ReactNode;
    feedbackLayout?: 'loose' | 'terse' | 'popover' | 'none';
    bordered?: boolean;
    breakpoints?: number[];
    spaceGap?: number;
    gridColumnGap?: number;
    gridRowGap?: number;
}
export interface IFormLayoutContext extends Omit<IFormLayoutProps, 'labelAlign' | 'wrapperAlign' | 'layout' | 'labelCol' | 'wrapperCol'> {
    labelAlign?: 'right' | 'left';
    wrapperAlign?: 'right' | 'left';
    layout?: 'vertical' | 'horizontal' | 'inline';
    labelCol?: number;
    wrapperCol?: number;
}
export declare const FormLayoutDeepContext: React.Context<IFormLayoutContext>;
export declare const FormLayoutShallowContext: React.Context<IFormLayoutContext>;
export declare const useFormDeepLayout: () => IFormLayoutContext;
export declare const useFormShallowLayout: () => IFormLayoutContext;
export declare const useFormLayout: () => {
    labelAlign?: 'right' | 'left';
    wrapperAlign?: 'right' | 'left';
    layout?: 'vertical' | 'horizontal' | 'inline';
    labelCol?: number;
    wrapperCol?: number;
    style?: React.CSSProperties;
    className?: string;
    size?: 'small' | 'default' | 'large';
    prefixCls?: string;
    direction?: 'rtl' | 'ltr';
    bordered?: boolean;
    breakpoints?: number[];
    colon?: boolean;
    labelWrap?: boolean;
    labelWidth?: number;
    wrapperWidth?: number;
    wrapperWrap?: boolean;
    fullness?: boolean;
    inset?: boolean;
    shallow?: boolean;
    tooltipLayout?: 'icon' | 'text';
    tooltipIcon?: React.ReactNode;
    feedbackLayout?: 'loose' | 'terse' | 'popover' | 'none';
    spaceGap?: number;
    gridColumnGap?: number;
    gridRowGap?: number;
};
export declare const FormLayout: React.FC<React.PropsWithChildren<IFormLayoutProps>> & {
    useFormLayout: () => IFormLayoutContext;
    useFormDeepLayout: () => IFormLayoutContext;
    useFormShallowLayout: () => IFormLayoutContext;
};
export default FormLayout;
