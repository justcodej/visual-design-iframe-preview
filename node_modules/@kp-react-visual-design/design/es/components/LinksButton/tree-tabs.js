import React, { useContext } from 'react';
import { Tabs, Table, Input } from 'antd';
import columns from './columns';
import { TABLE_SCROLL } from '../../consts';
import TableSearch from '../TableSearch';
import searchOptions from './search-options';
import mapValues from './map-values';
import LinkButtonContext from './context';
var expandable = {
  childrenColumnName: 'list',
  rowExpandable: function rowExpandable() {
    return false;
  }
};

var TreeTabs = function TreeTabs(_ref) {
  var items = _ref.items,
      pid = _ref.pid;

  var _useContext = useContext(LinkButtonContext),
      activeKey = _useContext.activeKey,
      onTabClick = _useContext.onTabClick,
      dataSource = _useContext.dataSource,
      loading = _useContext.loading,
      totalCount = _useContext.totalCount,
      payload = _useContext.payload,
      value = _useContext.value,
      _onChange = _useContext.onChange,
      onChangePayload = _useContext.onChangePayload,
      onSearch = _useContext.onSearch,
      onReset = _useContext.onReset,
      onPaginationChange = _useContext.onPaginationChange;

  var rowSelection = {
    onSelect: function onSelect(record) {
      // 根据接口返回的key去找取，避免字段发生变化
      var url = record[mapValues[activeKey]['key']];
      _onChange === null || _onChange === void 0 ? void 0 : _onChange(url);
    },
    type: 'radio',
    selectedRowKeys: value ? [value] : [],
    hideSelectAll: true
  };
  var newItems = items === null || items === void 0 ? void 0 : items.map(function (item, index) {
    var _mapValues$activeKey;

    return {
      label: item.name,
      key: item.subLinkTab ? item.subLinkTab[0].url : item.url,
      // key: getActiveKey(
      //   items,
      //   pid ? `${pid}.${item.url}` : `${item.url !== '' || item.subLinkTab ? index : item.url}`,
      // ),
      children: item.subLinkTab ? /*#__PURE__*/React.createElement(TreeTabs, {
        items: item.subLinkTab,
        pid: item.subLinkTab ? "".concat(index) : item.url
      }) : item.url ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableSearch, {
        options: searchOptions[activeKey],
        onChange: onChangePayload,
        onSearch: onSearch,
        onReset: onReset,
        values: payload
      }), /*#__PURE__*/React.createElement(Table, {
        dataSource: dataSource,
        scroll: TABLE_SCROLL,
        columns: columns[activeKey],
        expandable: expandable,
        bordered: true,
        rowKey: (_mapValues$activeKey = mapValues[activeKey]) === null || _mapValues$activeKey === void 0 ? void 0 : _mapValues$activeKey['key'],
        rowSelection: rowSelection,
        loading: loading,
        pagination: {
          defaultPageSize: 20,
          total: totalCount,
          onChange: onPaginationChange,
          current: payload === null || payload === void 0 ? void 0 : payload.page
        }
      })) : /*#__PURE__*/React.createElement(Input.TextArea, {
        rows: 4,
        value: value,
        onChange: function onChange(e) {
          return _onChange === null || _onChange === void 0 ? void 0 : _onChange(e.target.value);
        },
        placeholder: "\u8BF7\u8F93\u5165\u8DF3\u8F6C\u94FE\u63A5"
      })
    };
  });
  return /*#__PURE__*/React.createElement(Tabs, {
    onTabClick: onTabClick,
    defaultActiveKey: activeKey,
    destroyInactiveTabPane: true,
    items: newItems
  });
};

TreeTabs.defaultProps = {
  items: []
};
export default TreeTabs;